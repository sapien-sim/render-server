// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: render_server.proto

#include "render_server.pb.h"
#include "render_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sapien {
namespace render_server {
namespace proto {

static const char* RenderService_method_names[] = {
  "/sapien.render_server.proto.RenderService/CreateScene",
  "/sapien.render_server.proto.RenderService/RemoveScene",
  "/sapien.render_server.proto.RenderService/CreateMaterial",
  "/sapien.render_server.proto.RenderService/RemoveMaterial",
  "/sapien.render_server.proto.RenderService/AddBodyMesh",
  "/sapien.render_server.proto.RenderService/AddBodyPrimitive",
  "/sapien.render_server.proto.RenderService/RemoveBody",
  "/sapien.render_server.proto.RenderService/AddCamera",
  "/sapien.render_server.proto.RenderService/SetAmbientLight",
  "/sapien.render_server.proto.RenderService/AddPointLight",
  "/sapien.render_server.proto.RenderService/AddDirectionalLight",
  "/sapien.render_server.proto.RenderService/SetEntityOrder",
  "/sapien.render_server.proto.RenderService/UpdateRender",
  "/sapien.render_server.proto.RenderService/UpdateRenderAndTakePictures",
  "/sapien.render_server.proto.RenderService/SetBaseColor",
  "/sapien.render_server.proto.RenderService/SetRoughness",
  "/sapien.render_server.proto.RenderService/SetSpecular",
  "/sapien.render_server.proto.RenderService/SetMetallic",
  "/sapien.render_server.proto.RenderService/SetVisibility",
  "/sapien.render_server.proto.RenderService/GetShapeCount",
  "/sapien.render_server.proto.RenderService/GetShapeMaterial",
  "/sapien.render_server.proto.RenderService/TakePicture",
  "/sapien.render_server.proto.RenderService/SetCameraParameters",
};

std::unique_ptr< RenderService::Stub> RenderService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RenderService::Stub> stub(new RenderService::Stub(channel, options));
  return stub;
}

RenderService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateScene_(RenderService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveScene_(RenderService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateMaterial_(RenderService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveMaterial_(RenderService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBodyMesh_(RenderService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddBodyPrimitive_(RenderService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveBody_(RenderService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddCamera_(RenderService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAmbientLight_(RenderService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddPointLight_(RenderService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddDirectionalLight_(RenderService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetEntityOrder_(RenderService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRender_(RenderService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRenderAndTakePictures_(RenderService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBaseColor_(RenderService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetRoughness_(RenderService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSpecular_(RenderService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMetallic_(RenderService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetVisibility_(RenderService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShapeCount_(RenderService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShapeMaterial_(RenderService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TakePicture_(RenderService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCameraParameters_(RenderService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RenderService::Stub::CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateScene_, context, request, response);
}

void RenderService::Stub::async::CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateScene_, context, request, response, std::move(f));
}

void RenderService::Stub::async::CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Index, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveScene_, context, request, response);
}

void RenderService::Stub::async::RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveScene_, context, request, response, std::move(f));
}

void RenderService::Stub::async::RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateMaterial_, context, request, response);
}

void RenderService::Stub::async::CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMaterial_, context, request, response, std::move(f));
}

void RenderService::Stub::async::CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateMaterial_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateMaterialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveMaterial_, context, request, response);
}

void RenderService::Stub::async::RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveMaterial_, context, request, response, std::move(f));
}

void RenderService::Stub::async::RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveMaterial_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveMaterialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddBodyMesh_, context, request, response);
}

void RenderService::Stub::async::AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBodyMesh_, context, request, response, std::move(f));
}

void RenderService::Stub::async::AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBodyMesh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::AddBodyMeshReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddBodyMesh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddBodyMeshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddBodyPrimitive_, context, request, response);
}

void RenderService::Stub::async::AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBodyPrimitive_, context, request, response, std::move(f));
}

void RenderService::Stub::async::AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddBodyPrimitive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::AddBodyPrimitiveReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddBodyPrimitive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddBodyPrimitiveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveBody_, context, request, response);
}

void RenderService::Stub::async::RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveBody_, context, request, response, std::move(f));
}

void RenderService::Stub::async::RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveBody_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::RemoveBodyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveBody_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveBodyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddCamera_, context, request, response);
}

void RenderService::Stub::async::AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCamera_, context, request, response, std::move(f));
}

void RenderService::Stub::async::AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::AddCameraReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAmbientLight_, context, request, response);
}

void RenderService::Stub::async::SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAmbientLight_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAmbientLight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::IdVec3, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAmbientLight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAmbientLightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddPointLight_, context, request, response);
}

void RenderService::Stub::async::AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPointLight_, context, request, response, std::move(f));
}

void RenderService::Stub::async::AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddPointLight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::AddPointLightReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddPointLight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddPointLightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddDirectionalLight_, context, request, response);
}

void RenderService::Stub::async::AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddDirectionalLight_, context, request, response, std::move(f));
}

void RenderService::Stub::async::AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddDirectionalLight_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::AddDirectionalLightReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddDirectionalLight_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddDirectionalLightRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetEntityOrder_, context, request, response);
}

void RenderService::Stub::async::SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEntityOrder_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetEntityOrder_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::EntityOrderReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetEntityOrder_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetEntityOrderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRender_, context, request, response);
}

void RenderService::Stub::async::UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRender_, context, request, response, std::move(f));
}

void RenderService::Stub::async::UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRender_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::UpdateRenderReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRender_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRenderRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateRenderAndTakePictures_, context, request, response);
}

void RenderService::Stub::async::UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRenderAndTakePictures_, context, request, response, std::move(f));
}

void RenderService::Stub::async::UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateRenderAndTakePictures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateRenderAndTakePictures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRenderAndTakePicturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBaseColor_, context, request, response);
}

void RenderService::Stub::async::SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaseColor_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBaseColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::IdVec4, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBaseColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBaseColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetRoughness_, context, request, response);
}

void RenderService::Stub::async::SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRoughness_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetRoughness_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::IdFloat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetRoughness_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetRoughnessRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSpecular_, context, request, response);
}

void RenderService::Stub::async::SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpecular_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSpecular_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::IdFloat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSpecular_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSpecularRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMetallic_, context, request, response);
}

void RenderService::Stub::async::SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMetallic_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMetallic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::IdFloat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMetallic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMetallicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetVisibility_, context, request, response);
}

void RenderService::Stub::async::SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisibility_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetVisibility_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::BodyFloat32Req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetVisibility_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetVisibilityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::sapien::render_server::proto::Uint32* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShapeCount_, context, request, response);
}

void RenderService::Stub::async::GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeCount_, context, request, response, std::move(f));
}

void RenderService::Stub::async::GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>* RenderService::Stub::PrepareAsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Uint32, ::sapien::render_server::proto::BodyReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShapeCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>* RenderService::Stub::AsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShapeCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::sapien::render_server::proto::Id* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShapeMaterial_, context, request, response);
}

void RenderService::Stub::async::GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeMaterial_, context, request, response, std::move(f));
}

void RenderService::Stub::async::GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShapeMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::PrepareAsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::BodyUint32Req, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShapeMaterial_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* RenderService::Stub::AsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShapeMaterialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TakePicture_, context, request, response);
}

void RenderService::Stub::async::TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TakePicture_, context, request, response, std::move(f));
}

void RenderService::Stub::async::TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TakePicture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::TakePictureReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TakePicture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTakePictureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RenderService::Stub::SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::sapien::render_server::proto::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraParameters_, context, request, response);
}

void RenderService::Stub::async::SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParameters_, context, request, response, std::move(f));
}

void RenderService::Stub::async::SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::CameraParamsReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* RenderService::Stub::AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

RenderService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::Index* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->CreateScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::Id* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->RemoveScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::Empty* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->CreateMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::Id* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->RemoveMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::AddBodyMeshReq* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->AddBodyMesh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::AddBodyPrimitiveReq* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->AddBodyPrimitive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::RemoveBodyReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->RemoveBody(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::AddCameraReq* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->AddCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::IdVec3* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetAmbientLight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::AddPointLightReq* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->AddPointLight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::AddDirectionalLightReq* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->AddDirectionalLight(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::EntityOrderReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetEntityOrder(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::UpdateRenderReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->UpdateRender(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->UpdateRenderAndTakePictures(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::IdVec4* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetBaseColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::IdFloat* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetRoughness(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::IdFloat* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetSpecular(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::IdFloat* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetMetallic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::BodyFloat32Req* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetVisibility(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::BodyReq* req,
             ::sapien::render_server::proto::Uint32* resp) {
               return service->GetShapeCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::BodyUint32Req* req,
             ::sapien::render_server::proto::Id* resp) {
               return service->GetShapeMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::TakePictureReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->TakePicture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RenderService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RenderService::Service, ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RenderService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sapien::render_server::proto::CameraParamsReq* req,
             ::sapien::render_server::proto::Empty* resp) {
               return service->SetCameraParameters(ctx, req, resp);
             }, this)));
}

RenderService::Service::~Service() {
}

::grpc::Status RenderService::Service::CreateScene(::grpc::ServerContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::RemoveScene(::grpc::ServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::CreateMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::RemoveMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::AddBodyMesh(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::AddBodyPrimitive(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::RemoveBody(::grpc::ServerContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::AddCamera(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetAmbientLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::AddPointLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::AddDirectionalLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetEntityOrder(::grpc::ServerContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::UpdateRender(::grpc::ServerContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::UpdateRenderAndTakePictures(::grpc::ServerContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetBaseColor(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetRoughness(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetSpecular(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetMetallic(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetVisibility(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::GetShapeCount(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::GetShapeMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::TakePicture(::grpc::ServerContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RenderService::Service::SetCameraParameters(::grpc::ServerContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sapien
}  // namespace render_server
}  // namespace proto

