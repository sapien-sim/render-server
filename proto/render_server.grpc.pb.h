// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: render_server.proto
#ifndef GRPC_render_5fserver_2eproto__INCLUDED
#define GRPC_render_5fserver_2eproto__INCLUDED

#include "render_server.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace sapien {
namespace render_server {
namespace proto {

class RenderService final {
 public:
  static constexpr char const* service_full_name() {
    return "sapien.render_server.proto.RenderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ========== Renderer ==========//
    virtual ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncCreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncRemoveSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveSceneRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncCreateMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncCreateMaterialRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncRemoveMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveMaterialRaw(context, request, cq));
    }
    // ========== Scene ==========//
    virtual ::grpc::Status AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncAddBodyMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncAddBodyMeshRaw(context, request, cq));
    }
    virtual ::grpc::Status AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncRemoveBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveBodyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncAddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncAddCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncAddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncAddCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetAmbientLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetAmbientLightRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncAddPointLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncAddPointLightRaw(context, request, cq));
    }
    virtual ::grpc::Status AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncAddDirectionalLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncAddDirectionalLightRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetEntityOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetEntityOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncUpdateRenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncUpdateRenderRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncUpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncUpdateRenderAndTakePicturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncUpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncUpdateRenderAndTakePicturesRaw(context, request, cq));
    }
    // ========== Material ==========//
    virtual ::grpc::Status SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetBaseColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetBaseColorRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetRoughnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetRoughnessRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetSpecularRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetSpecularRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetMetallicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetMetallicRaw(context, request, cq));
    }
    // ========== Body ==========//
    // rpc SetUniqueId(BodyIdReq) returns (Empty);
    // rpc SetSegmentationId(BodyIdReq) returns (Empty);
    virtual ::grpc::Status SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetVisibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetVisibilityRaw(context, request, cq));
    }
    virtual ::grpc::Status GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::sapien::render_server::proto::Uint32* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>> AsyncGetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>>(AsyncGetShapeCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>> PrepareAsyncGetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>>(PrepareAsyncGetShapeCountRaw(context, request, cq));
    }
    // ========== Shape ==========//
    virtual ::grpc::Status GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::sapien::render_server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> AsyncGetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(AsyncGetShapeMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>> PrepareAsyncGetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>>(PrepareAsyncGetShapeMaterialRaw(context, request, cq));
    }
    // ========== Camera ==========//
    virtual ::grpc::Status TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncTakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncTakePictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncTakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncTakePictureRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::sapien::render_server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> AsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(AsyncSetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>> PrepareAsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetCameraParametersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ========== Renderer ==========//
      virtual void CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ========== Scene ==========//
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ========== Material ==========//
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ========== Body ==========//
      // rpc SetUniqueId(BodyIdReq) returns (Empty);
      // rpc SetSegmentationId(BodyIdReq) returns (Empty);
      virtual void SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ========== Shape ==========//
      virtual void GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ========== Camera ==========//
      virtual void TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>* AsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Uint32>* PrepareAsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* AsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Id>* PrepareAsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::render_server::proto::Empty>* PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncCreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    ::grpc::Status RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncRemoveSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveSceneRaw(context, request, cq));
    }
    ::grpc::Status CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncCreateMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncCreateMaterialRaw(context, request, cq));
    }
    ::grpc::Status RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncRemoveMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveMaterialRaw(context, request, cq));
    }
    ::grpc::Status AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncAddBodyMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncAddBodyMeshRaw(context, request, cq));
    }
    ::grpc::Status AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    ::grpc::Status RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncRemoveBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncRemoveBodyRaw(context, request, cq));
    }
    ::grpc::Status AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncAddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncAddCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncAddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncAddCameraRaw(context, request, cq));
    }
    ::grpc::Status SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetAmbientLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetAmbientLightRaw(context, request, cq));
    }
    ::grpc::Status AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncAddPointLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncAddPointLightRaw(context, request, cq));
    }
    ::grpc::Status AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncAddDirectionalLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncAddDirectionalLightRaw(context, request, cq));
    }
    ::grpc::Status SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetEntityOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetEntityOrderRaw(context, request, cq));
    }
    ::grpc::Status UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncUpdateRenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncUpdateRenderRaw(context, request, cq));
    }
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncUpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncUpdateRenderAndTakePicturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncUpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncUpdateRenderAndTakePicturesRaw(context, request, cq));
    }
    ::grpc::Status SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetBaseColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetBaseColorRaw(context, request, cq));
    }
    ::grpc::Status SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetRoughnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetRoughnessRaw(context, request, cq));
    }
    ::grpc::Status SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetSpecularRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetSpecularRaw(context, request, cq));
    }
    ::grpc::Status SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetMetallicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetMetallicRaw(context, request, cq));
    }
    ::grpc::Status SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetVisibilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetVisibilityRaw(context, request, cq));
    }
    ::grpc::Status GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::sapien::render_server::proto::Uint32* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>> AsyncGetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>>(AsyncGetShapeCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>> PrepareAsyncGetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>>(PrepareAsyncGetShapeCountRaw(context, request, cq));
    }
    ::grpc::Status GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::sapien::render_server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> AsyncGetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(AsyncGetShapeMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>> PrepareAsyncGetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>>(PrepareAsyncGetShapeMaterialRaw(context, request, cq));
    }
    ::grpc::Status TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncTakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncTakePictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncTakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncTakePictureRaw(context, request, cq));
    }
    ::grpc::Status SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::sapien::render_server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> AsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(AsyncSetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>> PrepareAsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>>(PrepareAsyncSetCameraParametersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void CreateScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveScene(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void CreateMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveBody(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddCamera(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddPointLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateRender(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateRenderAndTakePictures(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetBaseColor(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetRoughness(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetSpecular(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMetallic(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetVisibility(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, std::function<void(::grpc::Status)>) override;
      void GetShapeCount(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void GetShapeMaterial(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void TakePicture(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncUpdateRenderAndTakePicturesRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetVisibilityRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyFloat32Req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>* AsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Uint32>* PrepareAsyncGetShapeCountRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* AsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Id>* PrepareAsyncGetShapeMaterialRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::BodyUint32Req& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::render_server::proto::Empty>* PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::render_server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateScene_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveScene_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBodyMesh_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBodyPrimitive_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveBody_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAmbientLight_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPointLight_;
    const ::grpc::internal::RpcMethod rpcmethod_AddDirectionalLight_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEntityOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRender_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRenderAndTakePictures_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBaseColor_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRoughness_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSpecular_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMetallic_;
    const ::grpc::internal::RpcMethod rpcmethod_SetVisibility_;
    const ::grpc::internal::RpcMethod rpcmethod_GetShapeCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetShapeMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_TakePicture_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraParameters_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ========== Renderer ==========//
    virtual ::grpc::Status CreateScene(::grpc::ServerContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status RemoveScene(::grpc::ServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status CreateMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status RemoveMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response);
    // ========== Scene ==========//
    virtual ::grpc::Status AddBodyMesh(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status RemoveBody(::grpc::ServerContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status AddCamera(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status SetAmbientLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status AddPointLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status AddDirectionalLight(::grpc::ServerContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response);
    virtual ::grpc::Status SetEntityOrder(::grpc::ServerContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status UpdateRender(::grpc::ServerContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response);
    // ========== Material ==========//
    virtual ::grpc::Status SetBaseColor(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status SetRoughness(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status SetSpecular(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status SetMetallic(::grpc::ServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response);
    // ========== Body ==========//
    // rpc SetUniqueId(BodyIdReq) returns (Empty);
    // rpc SetSegmentationId(BodyIdReq) returns (Empty);
    virtual ::grpc::Status SetVisibility(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status GetShapeCount(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response);
    // ========== Shape ==========//
    virtual ::grpc::Status GetShapeMaterial(::grpc::ServerContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response);
    // ========== Camera ==========//
    virtual ::grpc::Status TakePicture(::grpc::ServerContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response);
    virtual ::grpc::Status SetCameraParameters(::grpc::ServerContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateScene() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::sapien::render_server::proto::Index* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveScene() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveScene(::grpc::ServerContext* context, ::sapien::render_server::proto::Id* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMaterial(::grpc::ServerContext* context, ::sapien::render_server::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMaterial(::grpc::ServerContext* context, ::sapien::render_server::proto::Id* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyMesh(::grpc::ServerContext* context, ::sapien::render_server::proto::AddBodyMeshReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyPrimitive(::grpc::ServerContext* context, ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveBody() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveBody(::grpc::ServerContext* context, ::sapien::render_server::proto::RemoveBodyReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCamera() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCamera(::grpc::ServerContext* context, ::sapien::render_server::proto::AddCameraReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAmbientLight(::grpc::ServerContext* context, ::sapien::render_server::proto::IdVec3* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPointLight() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPointLight(::grpc::ServerContext* context, ::sapien::render_server::proto::AddPointLightReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDirectionalLight(::grpc::ServerContext* context, ::sapien::render_server::proto::AddDirectionalLightReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEntityOrder(::grpc::ServerContext* context, ::sapien::render_server::proto::EntityOrderReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRender() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRender(::grpc::ServerContext* context, ::sapien::render_server::proto::UpdateRenderReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRenderAndTakePictures(::grpc::ServerContext* context, ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBaseColor(::grpc::ServerContext* context, ::sapien::render_server::proto::IdVec4* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRoughness() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoughness(::grpc::ServerContext* context, ::sapien::render_server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSpecular() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSpecular(::grpc::ServerContext* context, ::sapien::render_server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMetallic() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMetallic(::grpc::ServerContext* context, ::sapien::render_server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetVisibility() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisibility(::grpc::ServerContext* context, ::sapien::render_server::proto::BodyFloat32Req* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShapeCount(::grpc::ServerContext* context, ::sapien::render_server::proto::BodyReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Uint32>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShapeMaterial(::grpc::ServerContext* context, ::sapien::render_server::proto::BodyUint32Req* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TakePicture() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakePicture(::grpc::ServerContext* context, ::sapien::render_server::proto::TakePictureReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraParameters(::grpc::ServerContext* context, ::sapien::render_server::proto::CameraParamsReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::render_server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateScene<WithAsyncMethod_RemoveScene<WithAsyncMethod_CreateMaterial<WithAsyncMethod_RemoveMaterial<WithAsyncMethod_AddBodyMesh<WithAsyncMethod_AddBodyPrimitive<WithAsyncMethod_RemoveBody<WithAsyncMethod_AddCamera<WithAsyncMethod_SetAmbientLight<WithAsyncMethod_AddPointLight<WithAsyncMethod_AddDirectionalLight<WithAsyncMethod_SetEntityOrder<WithAsyncMethod_UpdateRender<WithAsyncMethod_UpdateRenderAndTakePictures<WithAsyncMethod_SetBaseColor<WithAsyncMethod_SetRoughness<WithAsyncMethod_SetSpecular<WithAsyncMethod_SetMetallic<WithAsyncMethod_SetVisibility<WithAsyncMethod_GetShapeCount<WithAsyncMethod_GetShapeMaterial<WithAsyncMethod_TakePicture<WithAsyncMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateScene() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::Index* request, ::sapien::render_server::proto::Id* response) { return this->CreateScene(context, request, response); }));}
    void SetMessageAllocatorFor_CreateScene(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveScene() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response) { return this->RemoveScene(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveScene(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveScene(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::Empty* request, ::sapien::render_server::proto::Id* response) { return this->CreateMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMaterial(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::Id* request, ::sapien::render_server::proto::Empty* response) { return this->RemoveMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveMaterial(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::AddBodyMeshReq* request, ::sapien::render_server::proto::Id* response) { return this->AddBodyMesh(context, request, response); }));}
    void SetMessageAllocatorFor_AddBodyMesh(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddBodyMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::AddBodyPrimitiveReq* request, ::sapien::render_server::proto::Id* response) { return this->AddBodyPrimitive(context, request, response); }));}
    void SetMessageAllocatorFor_AddBodyPrimitive(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveBody() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::RemoveBodyReq* request, ::sapien::render_server::proto::Empty* response) { return this->RemoveBody(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveBody(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveBody(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddCamera() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::AddCameraReq* request, ::sapien::render_server::proto::Id* response) { return this->AddCamera(context, request, response); }));}
    void SetMessageAllocatorFor_AddCamera(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::IdVec3* request, ::sapien::render_server::proto::Empty* response) { return this->SetAmbientLight(context, request, response); }));}
    void SetMessageAllocatorFor_SetAmbientLight(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAmbientLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddPointLight() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::AddPointLightReq* request, ::sapien::render_server::proto::Id* response) { return this->AddPointLight(context, request, response); }));}
    void SetMessageAllocatorFor_AddPointLight(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPointLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::AddDirectionalLightReq* request, ::sapien::render_server::proto::Id* response) { return this->AddDirectionalLight(context, request, response); }));}
    void SetMessageAllocatorFor_AddDirectionalLight(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::EntityOrderReq* request, ::sapien::render_server::proto::Empty* response) { return this->SetEntityOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SetEntityOrder(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEntityOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRender() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::UpdateRenderReq* request, ::sapien::render_server::proto::Empty* response) { return this->UpdateRender(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRender(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRender(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* request, ::sapien::render_server::proto::Empty* response) { return this->UpdateRenderAndTakePictures(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRenderAndTakePictures(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRenderAndTakePictures(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::IdVec4* request, ::sapien::render_server::proto::Empty* response) { return this->SetBaseColor(context, request, response); }));}
    void SetMessageAllocatorFor_SetBaseColor(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetBaseColor(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetRoughness() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) { return this->SetRoughness(context, request, response); }));}
    void SetMessageAllocatorFor_SetRoughness(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRoughness(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSpecular() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) { return this->SetSpecular(context, request, response); }));}
    void SetMessageAllocatorFor_SetSpecular(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSpecular(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMetallic() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::IdFloat* request, ::sapien::render_server::proto::Empty* response) { return this->SetMetallic(context, request, response); }));}
    void SetMessageAllocatorFor_SetMetallic(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMetallic(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetVisibility() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::BodyFloat32Req* request, ::sapien::render_server::proto::Empty* response) { return this->SetVisibility(context, request, response); }));}
    void SetMessageAllocatorFor_SetVisibility(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisibility(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::BodyReq* request, ::sapien::render_server::proto::Uint32* response) { return this->GetShapeCount(context, request, response); }));}
    void SetMessageAllocatorFor_GetShapeCount(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShapeCount(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::BodyUint32Req* request, ::sapien::render_server::proto::Id* response) { return this->GetShapeMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_GetShapeMaterial(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShapeMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TakePicture() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::TakePictureReq* request, ::sapien::render_server::proto::Empty* response) { return this->TakePicture(context, request, response); }));}
    void SetMessageAllocatorFor_TakePicture(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TakePicture(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::sapien::render_server::proto::CameraParamsReq* request, ::sapien::render_server::proto::Empty* response) { return this->SetCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraParameters(
        ::grpc::MessageAllocator< ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateScene<WithCallbackMethod_RemoveScene<WithCallbackMethod_CreateMaterial<WithCallbackMethod_RemoveMaterial<WithCallbackMethod_AddBodyMesh<WithCallbackMethod_AddBodyPrimitive<WithCallbackMethod_RemoveBody<WithCallbackMethod_AddCamera<WithCallbackMethod_SetAmbientLight<WithCallbackMethod_AddPointLight<WithCallbackMethod_AddDirectionalLight<WithCallbackMethod_SetEntityOrder<WithCallbackMethod_UpdateRender<WithCallbackMethod_UpdateRenderAndTakePictures<WithCallbackMethod_SetBaseColor<WithCallbackMethod_SetRoughness<WithCallbackMethod_SetSpecular<WithCallbackMethod_SetMetallic<WithCallbackMethod_SetVisibility<WithCallbackMethod_GetShapeCount<WithCallbackMethod_GetShapeMaterial<WithCallbackMethod_TakePicture<WithCallbackMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateScene() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveScene() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveBody() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCamera() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPointLight() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRender() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRoughness() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSpecular() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMetallic() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetVisibility() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TakePicture() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateScene() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveScene() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyMesh(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyPrimitive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveBody() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCamera() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAmbientLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPointLight() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPointLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDirectionalLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEntityOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRender() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRender(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRenderAndTakePictures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBaseColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRoughness() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoughness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSpecular() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSpecular(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMetallic() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMetallic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetVisibility() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetVisibility(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShapeCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetShapeMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TakePicture() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakePicture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateScene() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateScene(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveScene() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveScene(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddBodyMesh(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddBodyMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddBodyPrimitive(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveBody() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveBody(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddCamera() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAmbientLight(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAmbientLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddPointLight() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPointLight(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddPointLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddDirectionalLight(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEntityOrder(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetEntityOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRender() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRender(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRender(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRenderAndTakePictures(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRenderAndTakePictures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBaseColor(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetBaseColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetRoughness() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRoughness(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetRoughness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSpecular() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSpecular(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSpecular(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMetallic() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMetallic(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMetallic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetVisibility() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetVisibility(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetVisibility(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetShapeCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShapeCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetShapeMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetShapeMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TakePicture() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TakePicture(context, request, response); }));
    }
    ~WithRawCallbackMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TakePicture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateScene() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::Index, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedCreateScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Index* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::Index,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveScene() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedRemoveScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::Id,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::Empty, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedCreateMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Empty* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::Empty,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::Id, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedRemoveMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::Id* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::Id,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::AddBodyMeshReq, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedAddBodyMesh(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyMeshReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBodyMesh(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::AddBodyMeshReq,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::AddBodyPrimitiveReq, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedAddBodyPrimitive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBodyPrimitive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::AddBodyPrimitiveReq,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveBody() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::RemoveBodyReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedRemoveBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::RemoveBodyReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::RemoveBodyReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCamera() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::AddCameraReq, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedAddCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddCameraReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::AddCameraReq,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::IdVec3, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetAmbientLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec3* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAmbientLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::IdVec3,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPointLight() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::AddPointLightReq, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedAddPointLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddPointLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPointLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::AddPointLightReq,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::AddDirectionalLightReq, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedAddDirectionalLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::AddDirectionalLightReq* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddDirectionalLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::AddDirectionalLightReq,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::EntityOrderReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetEntityOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::EntityOrderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEntityOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::EntityOrderReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRender() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::UpdateRenderReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedUpdateRender(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRender(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::UpdateRenderReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRenderAndTakePictures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRenderAndTakePictures() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedUpdateRenderAndTakePictures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRenderAndTakePictures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRenderAndTakePictures(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRenderAndTakePictures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::IdVec4, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetBaseColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdVec4* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBaseColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::IdVec4,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRoughness() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetRoughness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRoughness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::IdFloat,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSpecular() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetSpecular(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSpecular(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::IdFloat,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMetallic() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::IdFloat, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetMetallic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::IdFloat* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMetallic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::IdFloat,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetVisibility : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetVisibility() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::BodyFloat32Req, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetVisibility(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetVisibility() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetVisibility(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyFloat32Req* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetVisibility(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::BodyFloat32Req,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetShapeCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetShapeCount() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::BodyReq, ::sapien::render_server::proto::Uint32>* streamer) {
                       return this->StreamedGetShapeCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetShapeCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetShapeCount(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyReq* /*request*/, ::sapien::render_server::proto::Uint32* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetShapeCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::BodyReq,::sapien::render_server::proto::Uint32>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetShapeMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetShapeMaterial() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::BodyUint32Req, ::sapien::render_server::proto::Id>* streamer) {
                       return this->StreamedGetShapeMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetShapeMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetShapeMaterial(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::BodyUint32Req* /*request*/, ::sapien::render_server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetShapeMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::BodyUint32Req,::sapien::render_server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TakePicture() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::TakePictureReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedTakePicture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::TakePictureReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTakePicture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::TakePictureReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::sapien::render_server::proto::CameraParamsReq, ::sapien::render_server::proto::Empty>* streamer) {
                       return this->StreamedSetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::render_server::proto::CameraParamsReq* /*request*/, ::sapien::render_server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::render_server::proto::CameraParamsReq,::sapien::render_server::proto::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_RemoveScene<WithStreamedUnaryMethod_CreateMaterial<WithStreamedUnaryMethod_RemoveMaterial<WithStreamedUnaryMethod_AddBodyMesh<WithStreamedUnaryMethod_AddBodyPrimitive<WithStreamedUnaryMethod_RemoveBody<WithStreamedUnaryMethod_AddCamera<WithStreamedUnaryMethod_SetAmbientLight<WithStreamedUnaryMethod_AddPointLight<WithStreamedUnaryMethod_AddDirectionalLight<WithStreamedUnaryMethod_SetEntityOrder<WithStreamedUnaryMethod_UpdateRender<WithStreamedUnaryMethod_UpdateRenderAndTakePictures<WithStreamedUnaryMethod_SetBaseColor<WithStreamedUnaryMethod_SetRoughness<WithStreamedUnaryMethod_SetSpecular<WithStreamedUnaryMethod_SetMetallic<WithStreamedUnaryMethod_SetVisibility<WithStreamedUnaryMethod_GetShapeCount<WithStreamedUnaryMethod_GetShapeMaterial<WithStreamedUnaryMethod_TakePicture<WithStreamedUnaryMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_RemoveScene<WithStreamedUnaryMethod_CreateMaterial<WithStreamedUnaryMethod_RemoveMaterial<WithStreamedUnaryMethod_AddBodyMesh<WithStreamedUnaryMethod_AddBodyPrimitive<WithStreamedUnaryMethod_RemoveBody<WithStreamedUnaryMethod_AddCamera<WithStreamedUnaryMethod_SetAmbientLight<WithStreamedUnaryMethod_AddPointLight<WithStreamedUnaryMethod_AddDirectionalLight<WithStreamedUnaryMethod_SetEntityOrder<WithStreamedUnaryMethod_UpdateRender<WithStreamedUnaryMethod_UpdateRenderAndTakePictures<WithStreamedUnaryMethod_SetBaseColor<WithStreamedUnaryMethod_SetRoughness<WithStreamedUnaryMethod_SetSpecular<WithStreamedUnaryMethod_SetMetallic<WithStreamedUnaryMethod_SetVisibility<WithStreamedUnaryMethod_GetShapeCount<WithStreamedUnaryMethod_GetShapeMaterial<WithStreamedUnaryMethod_TakePicture<WithStreamedUnaryMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace proto
}  // namespace render_server
}  // namespace sapien


#endif  // GRPC_render_5fserver_2eproto__INCLUDED
