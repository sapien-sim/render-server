// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: render_server.proto

#include "render_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sapien {
namespace render_server {
namespace proto {
PROTOBUF_CONSTEXPR Empty::Empty(
    ::_pbi::ConstantInitialized) {}
struct EmptyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmptyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmptyDefaultTypeInternal() {}
  union {
    Empty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmptyDefaultTypeInternal _Empty_default_instance_;
PROTOBUF_CONSTEXPR Uint32::Uint32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Uint32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Uint32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Uint32DefaultTypeInternal() {}
  union {
    Uint32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Uint32DefaultTypeInternal _Uint32_default_instance_;
PROTOBUF_CONSTEXPR Index::Index(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexDefaultTypeInternal() {}
  union {
    Index _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexDefaultTypeInternal _Index_default_instance_;
PROTOBUF_CONSTEXPR Id::Id(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdDefaultTypeInternal() {}
  union {
    Id _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdDefaultTypeInternal _Id_default_instance_;
PROTOBUF_CONSTEXPR Vec3::Vec3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec3DefaultTypeInternal _Vec3_default_instance_;
PROTOBUF_CONSTEXPR Vec4::Vec4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vec4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vec4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vec4DefaultTypeInternal() {}
  union {
    Vec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vec4DefaultTypeInternal _Vec4_default_instance_;
PROTOBUF_CONSTEXPR Quat::Quat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuatDefaultTypeInternal() {}
  union {
    Quat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuatDefaultTypeInternal _Quat_default_instance_;
PROTOBUF_CONSTEXPR Pose::Pose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.p_)*/nullptr
  , /*decltype(_impl_.q_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
PROTOBUF_CONSTEXPR IdVec3::IdVec3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdVec3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdVec3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdVec3DefaultTypeInternal() {}
  union {
    IdVec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdVec3DefaultTypeInternal _IdVec3_default_instance_;
PROTOBUF_CONSTEXPR IdVec4::IdVec4(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdVec4DefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdVec4DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdVec4DefaultTypeInternal() {}
  union {
    IdVec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdVec4DefaultTypeInternal _IdVec4_default_instance_;
PROTOBUF_CONSTEXPR IdFloat::IdFloat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdFloatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdFloatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdFloatDefaultTypeInternal() {}
  union {
    IdFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdFloatDefaultTypeInternal _IdFloat_default_instance_;
PROTOBUF_CONSTEXPR AddBodyMeshReq::AddBodyMeshReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.segmentation0_)*/uint64_t{0u}
  , /*decltype(_impl_.segmentation1_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddBodyMeshReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddBodyMeshReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddBodyMeshReqDefaultTypeInternal() {}
  union {
    AddBodyMeshReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddBodyMeshReqDefaultTypeInternal _AddBodyMeshReq_default_instance_;
PROTOBUF_CONSTEXPR AddBodyPrimitiveReq::AddBodyPrimitiveReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scale_)*/nullptr
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.material_)*/uint64_t{0u}
  , /*decltype(_impl_.segmentation0_)*/uint64_t{0u}
  , /*decltype(_impl_.segmentation1_)*/uint64_t{0u}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddBodyPrimitiveReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddBodyPrimitiveReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddBodyPrimitiveReqDefaultTypeInternal() {}
  union {
    AddBodyPrimitiveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddBodyPrimitiveReqDefaultTypeInternal _AddBodyPrimitiveReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveBodyReq::RemoveBodyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveBodyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveBodyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveBodyReqDefaultTypeInternal() {}
  union {
    RemoveBodyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveBodyReqDefaultTypeInternal _RemoveBodyReq_default_instance_;
PROTOBUF_CONSTEXPR AddCameraReq::AddCameraReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.width_)*/0u
  , /*decltype(_impl_.height_)*/0u
  , /*decltype(_impl_.near_)*/0
  , /*decltype(_impl_.far_)*/0
  , /*decltype(_impl_.fx_)*/0
  , /*decltype(_impl_.fy_)*/0
  , /*decltype(_impl_.cx_)*/0
  , /*decltype(_impl_.cy_)*/0
  , /*decltype(_impl_.skew_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddCameraReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddCameraReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddCameraReqDefaultTypeInternal() {}
  union {
    AddCameraReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddCameraReqDefaultTypeInternal _AddCameraReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveCameraReq::RemoveCameraReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.camera_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveCameraReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveCameraReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveCameraReqDefaultTypeInternal() {}
  union {
    RemoveCameraReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveCameraReqDefaultTypeInternal _RemoveCameraReq_default_instance_;
PROTOBUF_CONSTEXPR AddPointLightReq::AddPointLightReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.shadow_)*/false
  , /*decltype(_impl_.shadow_near_)*/0
  , /*decltype(_impl_.shadow_far_)*/0
  , /*decltype(_impl_.shadow_map_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddPointLightReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddPointLightReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddPointLightReqDefaultTypeInternal() {}
  union {
    AddPointLightReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddPointLightReqDefaultTypeInternal _AddPointLightReq_default_instance_;
PROTOBUF_CONSTEXPR AddDirectionalLightReq::AddDirectionalLightReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.shadow_)*/false
  , /*decltype(_impl_.shadow_scale_)*/0
  , /*decltype(_impl_.shadow_near_)*/0
  , /*decltype(_impl_.shadow_far_)*/0
  , /*decltype(_impl_.shadow_map_size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AddDirectionalLightReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddDirectionalLightReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddDirectionalLightReqDefaultTypeInternal() {}
  union {
    AddDirectionalLightReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddDirectionalLightReqDefaultTypeInternal _AddDirectionalLightReq_default_instance_;
PROTOBUF_CONSTEXPR RemoveLightReq::RemoveLightReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.light_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveLightReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveLightReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveLightReqDefaultTypeInternal() {}
  union {
    RemoveLightReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveLightReqDefaultTypeInternal _RemoveLightReq_default_instance_;
PROTOBUF_CONSTEXPR EntityOrderReq::EntityOrderReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_ids_)*/{}
  , /*decltype(_impl_._body_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.camera_ids_)*/{}
  , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntityOrderReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityOrderReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityOrderReqDefaultTypeInternal() {}
  union {
    EntityOrderReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityOrderReqDefaultTypeInternal _EntityOrderReq_default_instance_;
PROTOBUF_CONSTEXPR UpdateRenderReq::UpdateRenderReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_poses_)*/{}
  , /*decltype(_impl_.camera_poses_)*/{}
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRenderReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRenderReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRenderReqDefaultTypeInternal() {}
  union {
    UpdateRenderReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRenderReqDefaultTypeInternal _UpdateRenderReq_default_instance_;
PROTOBUF_CONSTEXPR BodyIdReq::BodyIdReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_id_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BodyIdReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BodyIdReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BodyIdReqDefaultTypeInternal() {}
  union {
    BodyIdReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BodyIdReqDefaultTypeInternal _BodyIdReq_default_instance_;
PROTOBUF_CONSTEXPR BodyUint32Req::BodyUint32Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_id_)*/uint64_t{0u}
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BodyUint32ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BodyUint32ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BodyUint32ReqDefaultTypeInternal() {}
  union {
    BodyUint32Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BodyUint32ReqDefaultTypeInternal _BodyUint32Req_default_instance_;
PROTOBUF_CONSTEXPR BodyFloat32Req::BodyFloat32Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_id_)*/uint64_t{0u}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BodyFloat32ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BodyFloat32ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BodyFloat32ReqDefaultTypeInternal() {}
  union {
    BodyFloat32Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BodyFloat32ReqDefaultTypeInternal _BodyFloat32Req_default_instance_;
PROTOBUF_CONSTEXPR TakePictureReq::TakePictureReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.camera_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TakePictureReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TakePictureReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TakePictureReqDefaultTypeInternal() {}
  union {
    TakePictureReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TakePictureReqDefaultTypeInternal _TakePictureReq_default_instance_;
PROTOBUF_CONSTEXPR UpdateRenderAndTakePicturesReq::UpdateRenderAndTakePicturesReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_poses_)*/{}
  , /*decltype(_impl_.camera_poses_)*/{}
  , /*decltype(_impl_.camera_ids_)*/{}
  , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateRenderAndTakePicturesReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateRenderAndTakePicturesReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateRenderAndTakePicturesReqDefaultTypeInternal() {}
  union {
    UpdateRenderAndTakePicturesReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateRenderAndTakePicturesReqDefaultTypeInternal _UpdateRenderAndTakePicturesReq_default_instance_;
PROTOBUF_CONSTEXPR CameraParamsReq::CameraParamsReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.camera_id_)*/uint64_t{0u}
  , /*decltype(_impl_.near_)*/0
  , /*decltype(_impl_.far_)*/0
  , /*decltype(_impl_.fx_)*/0
  , /*decltype(_impl_.fy_)*/0
  , /*decltype(_impl_.cx_)*/0
  , /*decltype(_impl_.cy_)*/0
  , /*decltype(_impl_.skew_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CameraParamsReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraParamsReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraParamsReqDefaultTypeInternal() {}
  union {
    CameraParamsReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraParamsReqDefaultTypeInternal _CameraParamsReq_default_instance_;
PROTOBUF_CONSTEXPR BodyReq::BodyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/uint64_t{0u}
  , /*decltype(_impl_.body_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BodyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BodyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BodyReqDefaultTypeInternal() {}
  union {
    BodyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BodyReqDefaultTypeInternal _BodyReq_default_instance_;
}  // namespace proto
}  // namespace render_server
}  // namespace sapien
static ::_pb::Metadata file_level_metadata_render_5fserver_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_render_5fserver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_render_5fserver_2eproto = nullptr;

const uint32_t TableStruct_render_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Uint32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Uint32, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Index, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Index, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Id, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec4, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec4, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec4, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Vec4, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Quat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Quat, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Quat, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Quat, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Quat, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Pose, _impl_.p_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::Pose, _impl_.q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec3, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec3, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec4, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdVec4, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdFloat, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::IdFloat, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _impl_.filename_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _impl_.segmentation0_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyMeshReq, _impl_.segmentation1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.scale_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.material_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.segmentation0_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddBodyPrimitiveReq, _impl_.segmentation1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveBodyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveBodyReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveBodyReq, _impl_.body_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.near_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.far_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.fx_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.fy_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.cx_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.cy_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.skew_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddCameraReq, _impl_.shader_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveCameraReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveCameraReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveCameraReq, _impl_.camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.shadow_near_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.shadow_far_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddPointLightReq, _impl_.shadow_map_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.shadow_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.shadow_scale_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.shadow_near_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.shadow_far_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::AddDirectionalLightReq, _impl_.shadow_map_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveLightReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveLightReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::RemoveLightReq, _impl_.light_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::EntityOrderReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::EntityOrderReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::EntityOrderReq, _impl_.body_ids_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::EntityOrderReq, _impl_.camera_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderReq, _impl_.body_poses_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderReq, _impl_.camera_poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyIdReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyIdReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyIdReq, _impl_.body_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyIdReq, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyUint32Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyUint32Req, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyUint32Req, _impl_.body_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyUint32Req, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyFloat32Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyFloat32Req, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyFloat32Req, _impl_.body_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyFloat32Req, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::TakePictureReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::TakePictureReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::TakePictureReq, _impl_.camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, _impl_.body_poses_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, _impl_.camera_poses_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq, _impl_.camera_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.near_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.far_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.fx_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.fy_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.cx_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.cy_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::CameraParamsReq, _impl_.skew_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyReq, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::sapien::render_server::proto::BodyReq, _impl_.body_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sapien::render_server::proto::Empty)},
  { 6, -1, -1, sizeof(::sapien::render_server::proto::Uint32)},
  { 13, -1, -1, sizeof(::sapien::render_server::proto::Index)},
  { 20, -1, -1, sizeof(::sapien::render_server::proto::Id)},
  { 27, -1, -1, sizeof(::sapien::render_server::proto::Vec3)},
  { 36, -1, -1, sizeof(::sapien::render_server::proto::Vec4)},
  { 46, -1, -1, sizeof(::sapien::render_server::proto::Quat)},
  { 56, -1, -1, sizeof(::sapien::render_server::proto::Pose)},
  { 64, -1, -1, sizeof(::sapien::render_server::proto::IdVec3)},
  { 72, -1, -1, sizeof(::sapien::render_server::proto::IdVec4)},
  { 80, -1, -1, sizeof(::sapien::render_server::proto::IdFloat)},
  { 88, -1, -1, sizeof(::sapien::render_server::proto::AddBodyMeshReq)},
  { 99, -1, -1, sizeof(::sapien::render_server::proto::AddBodyPrimitiveReq)},
  { 111, -1, -1, sizeof(::sapien::render_server::proto::RemoveBodyReq)},
  { 119, -1, -1, sizeof(::sapien::render_server::proto::AddCameraReq)},
  { 136, -1, -1, sizeof(::sapien::render_server::proto::RemoveCameraReq)},
  { 144, -1, -1, sizeof(::sapien::render_server::proto::AddPointLightReq)},
  { 157, -1, -1, sizeof(::sapien::render_server::proto::AddDirectionalLightReq)},
  { 172, -1, -1, sizeof(::sapien::render_server::proto::RemoveLightReq)},
  { 180, -1, -1, sizeof(::sapien::render_server::proto::EntityOrderReq)},
  { 189, -1, -1, sizeof(::sapien::render_server::proto::UpdateRenderReq)},
  { 198, -1, -1, sizeof(::sapien::render_server::proto::BodyIdReq)},
  { 207, -1, -1, sizeof(::sapien::render_server::proto::BodyUint32Req)},
  { 216, -1, -1, sizeof(::sapien::render_server::proto::BodyFloat32Req)},
  { 225, -1, -1, sizeof(::sapien::render_server::proto::TakePictureReq)},
  { 233, -1, -1, sizeof(::sapien::render_server::proto::UpdateRenderAndTakePicturesReq)},
  { 243, -1, -1, sizeof(::sapien::render_server::proto::CameraParamsReq)},
  { 258, -1, -1, sizeof(::sapien::render_server::proto::BodyReq)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::sapien::render_server::proto::_Empty_default_instance_._instance,
  &::sapien::render_server::proto::_Uint32_default_instance_._instance,
  &::sapien::render_server::proto::_Index_default_instance_._instance,
  &::sapien::render_server::proto::_Id_default_instance_._instance,
  &::sapien::render_server::proto::_Vec3_default_instance_._instance,
  &::sapien::render_server::proto::_Vec4_default_instance_._instance,
  &::sapien::render_server::proto::_Quat_default_instance_._instance,
  &::sapien::render_server::proto::_Pose_default_instance_._instance,
  &::sapien::render_server::proto::_IdVec3_default_instance_._instance,
  &::sapien::render_server::proto::_IdVec4_default_instance_._instance,
  &::sapien::render_server::proto::_IdFloat_default_instance_._instance,
  &::sapien::render_server::proto::_AddBodyMeshReq_default_instance_._instance,
  &::sapien::render_server::proto::_AddBodyPrimitiveReq_default_instance_._instance,
  &::sapien::render_server::proto::_RemoveBodyReq_default_instance_._instance,
  &::sapien::render_server::proto::_AddCameraReq_default_instance_._instance,
  &::sapien::render_server::proto::_RemoveCameraReq_default_instance_._instance,
  &::sapien::render_server::proto::_AddPointLightReq_default_instance_._instance,
  &::sapien::render_server::proto::_AddDirectionalLightReq_default_instance_._instance,
  &::sapien::render_server::proto::_RemoveLightReq_default_instance_._instance,
  &::sapien::render_server::proto::_EntityOrderReq_default_instance_._instance,
  &::sapien::render_server::proto::_UpdateRenderReq_default_instance_._instance,
  &::sapien::render_server::proto::_BodyIdReq_default_instance_._instance,
  &::sapien::render_server::proto::_BodyUint32Req_default_instance_._instance,
  &::sapien::render_server::proto::_BodyFloat32Req_default_instance_._instance,
  &::sapien::render_server::proto::_TakePictureReq_default_instance_._instance,
  &::sapien::render_server::proto::_UpdateRenderAndTakePicturesReq_default_instance_._instance,
  &::sapien::render_server::proto::_CameraParamsReq_default_instance_._instance,
  &::sapien::render_server::proto::_BodyReq_default_instance_._instance,
};

const char descriptor_table_protodef_render_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023render_server.proto\022\032sapien.render_ser"
  "ver.proto\"\007\n\005Empty\"\027\n\006Uint32\022\r\n\005value\030\001 "
  "\001(\r\"\026\n\005Index\022\r\n\005index\030\001 \001(\004\"\020\n\002Id\022\n\n\002id\030"
  "\001 \001(\004\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z"
  "\030\003 \001(\002\"2\n\004Vec4\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001"
  "z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\"2\n\004Quat\022\t\n\001w\030\001 \001(\002\022\t\n"
  "\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"`\n\004Pose\022+"
  "\n\001p\030\001 \001(\0132 .sapien.render_server.proto.V"
  "ec3\022+\n\001q\030\002 \001(\0132 .sapien.render_server.pr"
  "oto.Quat\"D\n\006IdVec3\022\n\n\002id\030\001 \001(\004\022.\n\004data\030\002"
  " \001(\0132 .sapien.render_server.proto.Vec3\"D"
  "\n\006IdVec4\022\n\n\002id\030\001 \001(\004\022.\n\004data\030\002 \001(\0132 .sap"
  "ien.render_server.proto.Vec4\"#\n\007IdFloat\022"
  "\n\n\002id\030\001 \001(\004\022\014\n\004data\030\002 \001(\002\"\223\001\n\016AddBodyMes"
  "hReq\022\020\n\010scene_id\030\001 \001(\004\022\020\n\010filename\030\002 \001(\t"
  "\022/\n\005scale\030\003 \001(\0132 .sapien.render_server.p"
  "roto.Vec3\022\025\n\rsegmentation0\030\004 \001(\004\022\025\n\rsegm"
  "entation1\030\005 \001(\004\"\321\001\n\023AddBodyPrimitiveReq\022"
  "\020\n\010scene_id\030\001 \001(\004\0227\n\004type\030\002 \001(\0162).sapien"
  ".render_server.proto.PrimitiveType\022/\n\005sc"
  "ale\030\003 \001(\0132 .sapien.render_server.proto.V"
  "ec3\022\020\n\010material\030\004 \001(\004\022\025\n\rsegmentation0\030\005"
  " \001(\004\022\025\n\rsegmentation1\030\006 \001(\004\"2\n\rRemoveBod"
  "yReq\022\020\n\010scene_id\030\001 \001(\004\022\017\n\007body_id\030\002 \001(\004\""
  "\250\001\n\014AddCameraReq\022\020\n\010scene_id\030\001 \001(\004\022\r\n\005wi"
  "dth\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\014\n\004near\030\004 \001(\002\022"
  "\013\n\003far\030\005 \001(\002\022\n\n\002fx\030\006 \001(\002\022\n\n\002fy\030\007 \001(\002\022\n\n\002"
  "cx\030\010 \001(\002\022\n\n\002cy\030\t \001(\002\022\014\n\004skew\030\n \001(\002\022\016\n\006sh"
  "ader\030\013 \001(\t\"6\n\017RemoveCameraReq\022\020\n\010scene_i"
  "d\030\001 \001(\004\022\021\n\tcamera_id\030\002 \001(\004\"\333\001\n\020AddPointL"
  "ightReq\022\020\n\010scene_id\030\001 \001(\004\0222\n\010position\030\002 "
  "\001(\0132 .sapien.render_server.proto.Vec3\022/\n"
  "\005color\030\003 \001(\0132 .sapien.render_server.prot"
  "o.Vec3\022\016\n\006shadow\030\004 \001(\010\022\023\n\013shadow_near\030\005 "
  "\001(\002\022\022\n\nshadow_far\030\006 \001(\002\022\027\n\017shadow_map_si"
  "ze\030\007 \001(\005\"\254\002\n\026AddDirectionalLightReq\022\020\n\010s"
  "cene_id\030\001 \001(\004\0223\n\tdirection\030\002 \001(\0132 .sapie"
  "n.render_server.proto.Vec3\022/\n\005color\030\003 \001("
  "\0132 .sapien.render_server.proto.Vec3\022\016\n\006s"
  "hadow\030\004 \001(\010\0222\n\010position\030\005 \001(\0132 .sapien.r"
  "ender_server.proto.Vec3\022\024\n\014shadow_scale\030"
  "\006 \001(\002\022\023\n\013shadow_near\030\007 \001(\002\022\022\n\nshadow_far"
  "\030\010 \001(\002\022\027\n\017shadow_map_size\030\t \001(\005\"4\n\016Remov"
  "eLightReq\022\020\n\010scene_id\030\001 \001(\004\022\020\n\010light_id\030"
  "\002 \001(\004\"P\n\016EntityOrderReq\022\020\n\010scene_id\030\001 \001("
  "\004\022\024\n\010body_ids\030\002 \003(\004B\002\020\001\022\026\n\ncamera_ids\030\003 "
  "\003(\004B\002\020\001\"\221\001\n\017UpdateRenderReq\022\020\n\010scene_id\030"
  "\001 \001(\004\0224\n\nbody_poses\030\002 \003(\0132 .sapien.rende"
  "r_server.proto.Pose\0226\n\014camera_poses\030\003 \003("
  "\0132 .sapien.render_server.proto.Pose\":\n\tB"
  "odyIdReq\022\020\n\010scene_id\030\001 \001(\004\022\017\n\007body_id\030\002 "
  "\001(\004\022\n\n\002id\030\003 \001(\r\">\n\rBodyUint32Req\022\020\n\010scen"
  "e_id\030\001 \001(\004\022\017\n\007body_id\030\002 \001(\004\022\n\n\002id\030\003 \001(\r\""
  "B\n\016BodyFloat32Req\022\020\n\010scene_id\030\001 \001(\004\022\017\n\007b"
  "ody_id\030\002 \001(\004\022\r\n\005value\030\003 \001(\002\"5\n\016TakePictu"
  "reReq\022\020\n\010scene_id\030\001 \001(\004\022\021\n\tcamera_id\030\002 \001"
  "(\004\"\270\001\n\036UpdateRenderAndTakePicturesReq\022\020\n"
  "\010scene_id\030\001 \001(\004\0224\n\nbody_poses\030\002 \003(\0132 .sa"
  "pien.render_server.proto.Pose\0226\n\014camera_"
  "poses\030\003 \003(\0132 .sapien.render_server.proto"
  ".Pose\022\026\n\ncamera_ids\030\004 \003(\004B\002\020\001\"\217\001\n\017Camera"
  "ParamsReq\022\020\n\010scene_id\030\001 \001(\004\022\021\n\tcamera_id"
  "\030\002 \001(\004\022\014\n\004near\030\003 \001(\002\022\013\n\003far\030\004 \001(\002\022\n\n\002fx\030"
  "\005 \001(\002\022\n\n\002fy\030\006 \001(\002\022\n\n\002cx\030\007 \001(\002\022\n\n\002cy\030\010 \001("
  "\002\022\014\n\004skew\030\t \001(\002\",\n\007BodyReq\022\020\n\010scene_id\030\001"
  " \001(\004\022\017\n\007body_id\030\002 \001(\004*J\n\rPrimitiveType\022\n"
  "\n\006SPHERE\020\000\022\007\n\003BOX\020\001\022\013\n\007CAPSULE\020\002\022\t\n\005PLAN"
  "E\020\003\022\014\n\010CYLINDER\020\0042\356\020\n\rRenderService\022P\n\013C"
  "reateScene\022!.sapien.render_server.proto."
  "Index\032\036.sapien.render_server.proto.Id\022P\n"
  "\013RemoveScene\022\036.sapien.render_server.prot"
  "o.Id\032!.sapien.render_server.proto.Empty\022"
  "S\n\016CreateMaterial\022!.sapien.render_server"
  ".proto.Empty\032\036.sapien.render_server.prot"
  "o.Id\022S\n\016RemoveMaterial\022\036.sapien.render_s"
  "erver.proto.Id\032!.sapien.render_server.pr"
  "oto.Empty\022Y\n\013AddBodyMesh\022*.sapien.render"
  "_server.proto.AddBodyMeshReq\032\036.sapien.re"
  "nder_server.proto.Id\022c\n\020AddBodyPrimitive"
  "\022/.sapien.render_server.proto.AddBodyPri"
  "mitiveReq\032\036.sapien.render_server.proto.I"
  "d\022Z\n\nRemoveBody\022).sapien.render_server.p"
  "roto.RemoveBodyReq\032!.sapien.render_serve"
  "r.proto.Empty\022U\n\tAddCamera\022(.sapien.rend"
  "er_server.proto.AddCameraReq\032\036.sapien.re"
  "nder_server.proto.Id\022X\n\017SetAmbientLight\022"
  "\".sapien.render_server.proto.IdVec3\032!.sa"
  "pien.render_server.proto.Empty\022]\n\rAddPoi"
  "ntLight\022,.sapien.render_server.proto.Add"
  "PointLightReq\032\036.sapien.render_server.pro"
  "to.Id\022i\n\023AddDirectionalLight\0222.sapien.re"
  "nder_server.proto.AddDirectionalLightReq"
  "\032\036.sapien.render_server.proto.Id\022_\n\016SetE"
  "ntityOrder\022*.sapien.render_server.proto."
  "EntityOrderReq\032!.sapien.render_server.pr"
  "oto.Empty\022^\n\014UpdateRender\022+.sapien.rende"
  "r_server.proto.UpdateRenderReq\032!.sapien."
  "render_server.proto.Empty\022|\n\033UpdateRende"
  "rAndTakePictures\022:.sapien.render_server."
  "proto.UpdateRenderAndTakePicturesReq\032!.s"
  "apien.render_server.proto.Empty\022U\n\014SetBa"
  "seColor\022\".sapien.render_server.proto.IdV"
  "ec4\032!.sapien.render_server.proto.Empty\022V"
  "\n\014SetRoughness\022#.sapien.render_server.pr"
  "oto.IdFloat\032!.sapien.render_server.proto"
  ".Empty\022U\n\013SetSpecular\022#.sapien.render_se"
  "rver.proto.IdFloat\032!.sapien.render_serve"
  "r.proto.Empty\022U\n\013SetMetallic\022#.sapien.re"
  "nder_server.proto.IdFloat\032!.sapien.rende"
  "r_server.proto.Empty\022^\n\rSetVisibility\022*."
  "sapien.render_server.proto.BodyFloat32Re"
  "q\032!.sapien.render_server.proto.Empty\022X\n\r"
  "GetShapeCount\022#.sapien.render_server.pro"
  "to.BodyReq\032\".sapien.render_server.proto."
  "Uint32\022]\n\020GetShapeMaterial\022).sapien.rend"
  "er_server.proto.BodyUint32Req\032\036.sapien.r"
  "ender_server.proto.Id\022\\\n\013TakePicture\022*.s"
  "apien.render_server.proto.TakePictureReq"
  "\032!.sapien.render_server.proto.Empty\022e\n\023S"
  "etCameraParameters\022+.sapien.render_serve"
  "r.proto.CameraParamsReq\032!.sapien.render_"
  "server.proto.Emptyb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_render_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_render_5fserver_2eproto = {
    false, false, 4866, descriptor_table_protodef_render_5fserver_2eproto,
    "render_server.proto",
    &descriptor_table_render_5fserver_2eproto_once, nullptr, 0, 28,
    schemas, file_default_instances, TableStruct_render_5fserver_2eproto::offsets,
    file_level_metadata_render_5fserver_2eproto, file_level_enum_descriptors_render_5fserver_2eproto,
    file_level_service_descriptors_render_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_render_5fserver_2eproto_getter() {
  return &descriptor_table_render_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_render_5fserver_2eproto(&descriptor_table_render_5fserver_2eproto);
namespace sapien {
namespace render_server {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_render_5fserver_2eproto);
  return file_level_enum_descriptors_render_5fserver_2eproto[0];
}
bool PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Empty::_Internal {
 public:
};

Empty::Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Empty)
}
Empty::Empty(const Empty& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  Empty* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Empty)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Empty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Empty::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Empty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[0]);
}

// ===================================================================

class Uint32::_Internal {
 public:
};

Uint32::Uint32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Uint32)
}
Uint32::Uint32(const Uint32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Uint32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Uint32)
}

inline void Uint32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Uint32::~Uint32() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Uint32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Uint32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Uint32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Uint32::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Uint32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Uint32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Uint32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Uint32)
  return target;
}

size_t Uint32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Uint32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Uint32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Uint32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Uint32::GetClassData() const { return &_class_data_; }


void Uint32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Uint32*>(&to_msg);
  auto& from = static_cast<const Uint32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Uint32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Uint32::CopyFrom(const Uint32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Uint32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32::IsInitialized() const {
  return true;
}

void Uint32::InternalSwap(Uint32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[1]);
}

// ===================================================================

class Index::_Internal {
 public:
};

Index::Index(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Index)
}
Index::Index(const Index& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Index* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Index)
}

inline void Index::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Index::~Index() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Index)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Index::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Index::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Index::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Index)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Index::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Index::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Index)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Index)
  return target;
}

size_t Index::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Index)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Index::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Index::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Index::GetClassData() const { return &_class_data_; }


void Index::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Index*>(&to_msg);
  auto& from = static_cast<const Index&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Index)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Index::CopyFrom(const Index& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Index)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Index::IsInitialized() const {
  return true;
}

void Index::InternalSwap(Index* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Index::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[2]);
}

// ===================================================================

class Id::_Internal {
 public:
};

Id::Id(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Id)
}
Id::Id(const Id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Id* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Id)
}

inline void Id::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Id::~Id() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Id)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Id::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Id::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Id::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Id)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Id::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Id::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Id)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Id)
  return target;
}

size_t Id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Id)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Id::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Id::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Id::GetClassData() const { return &_class_data_; }


void Id::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Id*>(&to_msg);
  auto& from = static_cast<const Id&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Id)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Id::CopyFrom(const Id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Id::IsInitialized() const {
  return true;
}

void Id::InternalSwap(Id* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Id::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[3]);
}

// ===================================================================

class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vec3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Vec3)
}

inline void Vec3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Vec3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Vec3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Vec3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Vec3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3::GetClassData() const { return &_class_data_; }


void Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vec3*>(&to_msg);
  auto& from = static_cast<const Vec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Vec3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, _impl_.z_)
      + sizeof(Vec3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[4]);
}

// ===================================================================

class Vec4::_Internal {
 public:
};

Vec4::Vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vec4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Vec4)
}

inline void Vec4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Vec4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Vec4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vec4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Vec4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Vec4)
  return target;
}

size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Vec4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vec4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec4::GetClassData() const { return &_class_data_; }


void Vec4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vec4*>(&to_msg);
  auto& from = static_cast<const Vec4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Vec4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  return true;
}

void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec4, _impl_.w_)
      + sizeof(Vec4::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Vec4, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[5]);
}

// ===================================================================

class Quat::_Internal {
 public:
};

Quat::Quat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Quat)
}
Quat::Quat(const Quat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.w_, &from._impl_.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Quat)
}

inline void Quat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.w_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quat::~Quat() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Quat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quat::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Quat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.w_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Quat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Quat)
  return target;
}

size_t Quat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Quat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  // float x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quat::GetClassData() const { return &_class_data_; }


void Quat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quat*>(&to_msg);
  auto& from = static_cast<const Quat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Quat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quat::CopyFrom(const Quat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Quat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quat::IsInitialized() const {
  return true;
}

void Quat::InternalSwap(Quat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quat, _impl_.z_)
      + sizeof(Quat::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Quat, _impl_.w_)>(
          reinterpret_cast<char*>(&_impl_.w_),
          reinterpret_cast<char*>(&other->_impl_.w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[6]);
}

// ===================================================================

class Pose::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& p(const Pose* msg);
  static const ::sapien::render_server::proto::Quat& q(const Pose* msg);
};

const ::sapien::render_server::proto::Vec3&
Pose::_Internal::p(const Pose* msg) {
  return *msg->_impl_.p_;
}
const ::sapien::render_server::proto::Quat&
Pose::_Internal::q(const Pose* msg) {
  return *msg->_impl_.q_;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Pose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p()) {
    _this->_impl_.p_ = new ::sapien::render_server::proto::Vec3(*from._impl_.p_);
  }
  if (from._internal_has_q()) {
    _this->_impl_.q_ = new ::sapien::render_server::proto::Quat(*from._impl_.q_);
  }
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.Pose)
}

inline void Pose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.p_){nullptr}
    , decltype(_impl_.q_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.Pose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.p_;
  if (this != internal_default_instance()) delete _impl_.q_;
}

void Pose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.p_ != nullptr) {
    delete _impl_.p_;
  }
  _impl_.p_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.q_ != nullptr) {
    delete _impl_.q_;
  }
  _impl_.q_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sapien.render_server.proto.Vec3 p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Quat q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 p = 1;
  if (this->_internal_has_p()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::p(this),
        _Internal::p(this).GetCachedSize(), target, stream);
  }

  // .sapien.render_server.proto.Quat q = 2;
  if (this->_internal_has_q()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::q(this),
        _Internal::q(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 p = 1;
  if (this->_internal_has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p_);
  }

  // .sapien.render_server.proto.Quat q = 2;
  if (this->_internal_has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.q_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }


void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Pose*>(&to_msg);
  auto& from = static_cast<const Pose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.Pose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _this->_internal_mutable_p()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_p());
  }
  if (from._internal_has_q()) {
    _this->_internal_mutable_q()->::sapien::render_server::proto::Quat::MergeFrom(
        from._internal_q());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, _impl_.q_)
      + sizeof(Pose::_impl_.q_)
      - PROTOBUF_FIELD_OFFSET(Pose, _impl_.p_)>(
          reinterpret_cast<char*>(&_impl_.p_),
          reinterpret_cast<char*>(&other->_impl_.p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[7]);
}

// ===================================================================

class IdVec3::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& data(const IdVec3* msg);
};

const ::sapien::render_server::proto::Vec3&
IdVec3::_Internal::data(const IdVec3* msg) {
  return *msg->_impl_.data_;
}
IdVec3::IdVec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.IdVec3)
}
IdVec3::IdVec3(const IdVec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdVec3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::sapien::render_server::proto::Vec3(*from._impl_.data_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.IdVec3)
}

inline void IdVec3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdVec3::~IdVec3() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.IdVec3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdVec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void IdVec3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdVec3::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.IdVec3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdVec3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdVec3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.IdVec3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .sapien.render_server.proto.Vec3 data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.IdVec3)
  return target;
}

size_t IdVec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.IdVec3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdVec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdVec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdVec3::GetClassData() const { return &_class_data_; }


void IdVec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdVec3*>(&to_msg);
  auto& from = static_cast<const IdVec3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.IdVec3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdVec3::CopyFrom(const IdVec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.IdVec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdVec3::IsInitialized() const {
  return true;
}

void IdVec3::InternalSwap(IdVec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdVec3, _impl_.id_)
      + sizeof(IdVec3::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(IdVec3, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdVec3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[8]);
}

// ===================================================================

class IdVec4::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec4& data(const IdVec4* msg);
};

const ::sapien::render_server::proto::Vec4&
IdVec4::_Internal::data(const IdVec4* msg) {
  return *msg->_impl_.data_;
}
IdVec4::IdVec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.IdVec4)
}
IdVec4::IdVec4(const IdVec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdVec4* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::sapien::render_server::proto::Vec4(*from._impl_.data_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.IdVec4)
}

inline void IdVec4::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){nullptr}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdVec4::~IdVec4() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.IdVec4)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdVec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.data_;
}

void IdVec4::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdVec4::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.IdVec4)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdVec4::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec4 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdVec4::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.IdVec4)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // .sapien.render_server.proto.Vec4 data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.IdVec4)
  return target;
}

size_t IdVec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.IdVec4)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec4 data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdVec4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdVec4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdVec4::GetClassData() const { return &_class_data_; }


void IdVec4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdVec4*>(&to_msg);
  auto& from = static_cast<const IdVec4&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.IdVec4)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::sapien::render_server::proto::Vec4::MergeFrom(
        from._internal_data());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdVec4::CopyFrom(const IdVec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.IdVec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdVec4::IsInitialized() const {
  return true;
}

void IdVec4::InternalSwap(IdVec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdVec4, _impl_.id_)
      + sizeof(IdVec4::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(IdVec4, _impl_.data_)>(
          reinterpret_cast<char*>(&_impl_.data_),
          reinterpret_cast<char*>(&other->_impl_.data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdVec4::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[9]);
}

// ===================================================================

class IdFloat::_Internal {
 public:
};

IdFloat::IdFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.IdFloat)
}
IdFloat::IdFloat(const IdFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdFloat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.data_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.IdFloat)
}

inline void IdFloat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdFloat::~IdFloat() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.IdFloat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IdFloat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.IdFloat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdFloat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdFloat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.IdFloat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // float data = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_data = this->_internal_data();
  uint32_t raw_data;
  memcpy(&raw_data, &tmp_data, sizeof(tmp_data));
  if (raw_data != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.IdFloat)
  return target;
}

size_t IdFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.IdFloat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // float data = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_data = this->_internal_data();
  uint32_t raw_data;
  memcpy(&raw_data, &tmp_data, sizeof(tmp_data));
  if (raw_data != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdFloat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdFloat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdFloat::GetClassData() const { return &_class_data_; }


void IdFloat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdFloat*>(&to_msg);
  auto& from = static_cast<const IdFloat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.IdFloat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_data = from._internal_data();
  uint32_t raw_data;
  memcpy(&raw_data, &tmp_data, sizeof(tmp_data));
  if (raw_data != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdFloat::CopyFrom(const IdFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.IdFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdFloat::IsInitialized() const {
  return true;
}

void IdFloat::InternalSwap(IdFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdFloat, _impl_.data_)
      + sizeof(IdFloat::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(IdFloat, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdFloat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[10]);
}

// ===================================================================

class AddBodyMeshReq::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& scale(const AddBodyMeshReq* msg);
};

const ::sapien::render_server::proto::Vec3&
AddBodyMeshReq::_Internal::scale(const AddBodyMeshReq* msg) {
  return *msg->_impl_.scale_;
}
AddBodyMeshReq::AddBodyMeshReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.AddBodyMeshReq)
}
AddBodyMeshReq::AddBodyMeshReq(const AddBodyMeshReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddBodyMeshReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.segmentation0_){}
    , decltype(_impl_.segmentation1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    _this->_impl_.filename_.Set(from._internal_filename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::sapien::render_server::proto::Vec3(*from._impl_.scale_);
  }
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.segmentation1_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.segmentation1_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.AddBodyMeshReq)
}

inline void AddBodyMeshReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_){}
    , decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.segmentation0_){uint64_t{0u}}
    , decltype(_impl_.segmentation1_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddBodyMeshReq::~AddBodyMeshReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.AddBodyMeshReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddBodyMeshReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void AddBodyMeshReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddBodyMeshReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.AddBodyMeshReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.segmentation1_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.segmentation1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddBodyMeshReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sapien.render_server.proto.AddBodyMeshReq.filename"));
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 segmentation0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.segmentation0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 segmentation1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.segmentation1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddBodyMeshReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.AddBodyMeshReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sapien.render_server.proto.AddBodyMeshReq.filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_filename(), target);
  }

  // .sapien.render_server.proto.Vec3 scale = 3;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // uint64 segmentation0 = 4;
  if (this->_internal_segmentation0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_segmentation0(), target);
  }

  // uint64 segmentation1 = 5;
  if (this->_internal_segmentation1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_segmentation1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.AddBodyMeshReq)
  return target;
}

size_t AddBodyMeshReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.AddBodyMeshReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 2;
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .sapien.render_server.proto.Vec3 scale = 3;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 segmentation0 = 4;
  if (this->_internal_segmentation0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_segmentation0());
  }

  // uint64 segmentation1 = 5;
  if (this->_internal_segmentation1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_segmentation1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddBodyMeshReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddBodyMeshReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddBodyMeshReq::GetClassData() const { return &_class_data_; }


void AddBodyMeshReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddBodyMeshReq*>(&to_msg);
  auto& from = static_cast<const AddBodyMeshReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.AddBodyMeshReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _this->_internal_set_filename(from._internal_filename());
  }
  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_segmentation0() != 0) {
    _this->_internal_set_segmentation0(from._internal_segmentation0());
  }
  if (from._internal_segmentation1() != 0) {
    _this->_internal_set_segmentation1(from._internal_segmentation1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddBodyMeshReq::CopyFrom(const AddBodyMeshReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.AddBodyMeshReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBodyMeshReq::IsInitialized() const {
  return true;
}

void AddBodyMeshReq::InternalSwap(AddBodyMeshReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_, lhs_arena,
      &other->_impl_.filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddBodyMeshReq, _impl_.segmentation1_)
      + sizeof(AddBodyMeshReq::_impl_.segmentation1_)
      - PROTOBUF_FIELD_OFFSET(AddBodyMeshReq, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBodyMeshReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[11]);
}

// ===================================================================

class AddBodyPrimitiveReq::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& scale(const AddBodyPrimitiveReq* msg);
};

const ::sapien::render_server::proto::Vec3&
AddBodyPrimitiveReq::_Internal::scale(const AddBodyPrimitiveReq* msg) {
  return *msg->_impl_.scale_;
}
AddBodyPrimitiveReq::AddBodyPrimitiveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.AddBodyPrimitiveReq)
}
AddBodyPrimitiveReq::AddBodyPrimitiveReq(const AddBodyPrimitiveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddBodyPrimitiveReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.material_){}
    , decltype(_impl_.segmentation0_){}
    , decltype(_impl_.segmentation1_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_scale()) {
    _this->_impl_.scale_ = new ::sapien::render_server::proto::Vec3(*from._impl_.scale_);
  }
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.AddBodyPrimitiveReq)
}

inline void AddBodyPrimitiveReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scale_){nullptr}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.material_){uint64_t{0u}}
    , decltype(_impl_.segmentation0_){uint64_t{0u}}
    , decltype(_impl_.segmentation1_){uint64_t{0u}}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddBodyPrimitiveReq::~AddBodyPrimitiveReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.AddBodyPrimitiveReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddBodyPrimitiveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void AddBodyPrimitiveReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddBodyPrimitiveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.AddBodyPrimitiveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddBodyPrimitiveReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.PrimitiveType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::sapien::render_server::proto::PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 material = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.material_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 segmentation0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.segmentation0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 segmentation1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.segmentation1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddBodyPrimitiveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.AddBodyPrimitiveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // .sapien.render_server.proto.PrimitiveType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .sapien.render_server.proto.Vec3 scale = 3;
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // uint64 material = 4;
  if (this->_internal_material() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_material(), target);
  }

  // uint64 segmentation0 = 5;
  if (this->_internal_segmentation0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_segmentation0(), target);
  }

  // uint64 segmentation1 = 6;
  if (this->_internal_segmentation1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_segmentation1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.AddBodyPrimitiveReq)
  return target;
}

size_t AddBodyPrimitiveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.AddBodyPrimitiveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 scale = 3;
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_);
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 material = 4;
  if (this->_internal_material() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_material());
  }

  // uint64 segmentation0 = 5;
  if (this->_internal_segmentation0() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_segmentation0());
  }

  // uint64 segmentation1 = 6;
  if (this->_internal_segmentation1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_segmentation1());
  }

  // .sapien.render_server.proto.PrimitiveType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddBodyPrimitiveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddBodyPrimitiveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddBodyPrimitiveReq::GetClassData() const { return &_class_data_; }


void AddBodyPrimitiveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddBodyPrimitiveReq*>(&to_msg);
  auto& from = static_cast<const AddBodyPrimitiveReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.AddBodyPrimitiveReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_scale()) {
    _this->_internal_mutable_scale()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_scale());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_material() != 0) {
    _this->_internal_set_material(from._internal_material());
  }
  if (from._internal_segmentation0() != 0) {
    _this->_internal_set_segmentation0(from._internal_segmentation0());
  }
  if (from._internal_segmentation1() != 0) {
    _this->_internal_set_segmentation1(from._internal_segmentation1());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddBodyPrimitiveReq::CopyFrom(const AddBodyPrimitiveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.AddBodyPrimitiveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBodyPrimitiveReq::IsInitialized() const {
  return true;
}

void AddBodyPrimitiveReq::InternalSwap(AddBodyPrimitiveReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddBodyPrimitiveReq, _impl_.type_)
      + sizeof(AddBodyPrimitiveReq::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AddBodyPrimitiveReq, _impl_.scale_)>(
          reinterpret_cast<char*>(&_impl_.scale_),
          reinterpret_cast<char*>(&other->_impl_.scale_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddBodyPrimitiveReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[12]);
}

// ===================================================================

class RemoveBodyReq::_Internal {
 public:
};

RemoveBodyReq::RemoveBodyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.RemoveBodyReq)
}
RemoveBodyReq::RemoveBodyReq(const RemoveBodyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveBodyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.body_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.body_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.body_id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.RemoveBodyReq)
}

inline void RemoveBodyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.body_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveBodyReq::~RemoveBodyReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.RemoveBodyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveBodyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveBodyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveBodyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.RemoveBodyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.body_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.body_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveBodyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveBodyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.RemoveBodyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.RemoveBodyReq)
  return target;
}

size_t RemoveBodyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.RemoveBodyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveBodyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveBodyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveBodyReq::GetClassData() const { return &_class_data_; }


void RemoveBodyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveBodyReq*>(&to_msg);
  auto& from = static_cast<const RemoveBodyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.RemoveBodyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_body_id() != 0) {
    _this->_internal_set_body_id(from._internal_body_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveBodyReq::CopyFrom(const RemoveBodyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.RemoveBodyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveBodyReq::IsInitialized() const {
  return true;
}

void RemoveBodyReq::InternalSwap(RemoveBodyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveBodyReq, _impl_.body_id_)
      + sizeof(RemoveBodyReq::_impl_.body_id_)
      - PROTOBUF_FIELD_OFFSET(RemoveBodyReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveBodyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[13]);
}

// ===================================================================

class AddCameraReq::_Internal {
 public:
};

AddCameraReq::AddCameraReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.AddCameraReq)
}
AddCameraReq::AddCameraReq(const AddCameraReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddCameraReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shader_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.near_){}
    , decltype(_impl_.far_){}
    , decltype(_impl_.fx_){}
    , decltype(_impl_.fy_){}
    , decltype(_impl_.cx_){}
    , decltype(_impl_.cy_){}
    , decltype(_impl_.skew_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.shader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_shader().empty()) {
    _this->_impl_.shader_.Set(from._internal_shader(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skew_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.skew_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.AddCameraReq)
}

inline void AddCameraReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shader_){}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.width_){0u}
    , decltype(_impl_.height_){0u}
    , decltype(_impl_.near_){0}
    , decltype(_impl_.far_){0}
    , decltype(_impl_.fx_){0}
    , decltype(_impl_.fy_){0}
    , decltype(_impl_.cx_){0}
    , decltype(_impl_.cy_){0}
    , decltype(_impl_.skew_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.shader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.shader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddCameraReq::~AddCameraReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.AddCameraReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddCameraReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shader_.Destroy();
}

void AddCameraReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddCameraReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.AddCameraReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shader_.ClearToEmpty();
  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skew_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.skew_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCameraReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float near = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float far = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fx = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cx = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.cx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.cy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float skew = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.skew_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string shader = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_shader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "sapien.render_server.proto.AddCameraReq.shader"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddCameraReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.AddCameraReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // float near = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = this->_internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_near(), target);
  }

  // float far = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = this->_internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_far(), target);
  }

  // float fx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_fx(), target);
  }

  // float fy = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = this->_internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_fy(), target);
  }

  // float cx = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = this->_internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_cx(), target);
  }

  // float cy = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = this->_internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_cy(), target);
  }

  // float skew = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = this->_internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_skew(), target);
  }

  // string shader = 11;
  if (!this->_internal_shader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shader().data(), static_cast<int>(this->_internal_shader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sapien.render_server.proto.AddCameraReq.shader");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_shader(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.AddCameraReq)
  return target;
}

size_t AddCameraReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.AddCameraReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string shader = 11;
  if (!this->_internal_shader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shader());
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  // float near = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = this->_internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    total_size += 1 + 4;
  }

  // float far = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = this->_internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    total_size += 1 + 4;
  }

  // float fx = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 4;
  }

  // float fy = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = this->_internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    total_size += 1 + 4;
  }

  // float cx = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = this->_internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    total_size += 1 + 4;
  }

  // float cy = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = this->_internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    total_size += 1 + 4;
  }

  // float skew = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = this->_internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddCameraReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddCameraReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddCameraReq::GetClassData() const { return &_class_data_; }


void AddCameraReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddCameraReq*>(&to_msg);
  auto& from = static_cast<const AddCameraReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.AddCameraReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_shader().empty()) {
    _this->_internal_set_shader(from._internal_shader());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = from._internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    _this->_internal_set_near(from._internal_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = from._internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    _this->_internal_set_far(from._internal_far());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = from._internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _this->_internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = from._internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    _this->_internal_set_fy(from._internal_fy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = from._internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    _this->_internal_set_cx(from._internal_cx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = from._internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    _this->_internal_set_cy(from._internal_cy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = from._internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    _this->_internal_set_skew(from._internal_skew());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddCameraReq::CopyFrom(const AddCameraReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.AddCameraReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCameraReq::IsInitialized() const {
  return true;
}

void AddCameraReq::InternalSwap(AddCameraReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.shader_, lhs_arena,
      &other->_impl_.shader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCameraReq, _impl_.skew_)
      + sizeof(AddCameraReq::_impl_.skew_)
      - PROTOBUF_FIELD_OFFSET(AddCameraReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCameraReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[14]);
}

// ===================================================================

class RemoveCameraReq::_Internal {
 public:
};

RemoveCameraReq::RemoveCameraReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.RemoveCameraReq)
}
RemoveCameraReq::RemoveCameraReq(const RemoveCameraReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveCameraReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.camera_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camera_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.camera_id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.RemoveCameraReq)
}

inline void RemoveCameraReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.camera_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveCameraReq::~RemoveCameraReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.RemoveCameraReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveCameraReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveCameraReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveCameraReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.RemoveCameraReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camera_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveCameraReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveCameraReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.RemoveCameraReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.RemoveCameraReq)
  return target;
}

size_t RemoveCameraReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.RemoveCameraReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camera_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveCameraReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveCameraReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveCameraReq::GetClassData() const { return &_class_data_; }


void RemoveCameraReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveCameraReq*>(&to_msg);
  auto& from = static_cast<const RemoveCameraReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.RemoveCameraReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_camera_id() != 0) {
    _this->_internal_set_camera_id(from._internal_camera_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveCameraReq::CopyFrom(const RemoveCameraReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.RemoveCameraReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCameraReq::IsInitialized() const {
  return true;
}

void RemoveCameraReq::InternalSwap(RemoveCameraReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveCameraReq, _impl_.camera_id_)
      + sizeof(RemoveCameraReq::_impl_.camera_id_)
      - PROTOBUF_FIELD_OFFSET(RemoveCameraReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveCameraReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[15]);
}

// ===================================================================

class AddPointLightReq::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& position(const AddPointLightReq* msg);
  static const ::sapien::render_server::proto::Vec3& color(const AddPointLightReq* msg);
};

const ::sapien::render_server::proto::Vec3&
AddPointLightReq::_Internal::position(const AddPointLightReq* msg) {
  return *msg->_impl_.position_;
}
const ::sapien::render_server::proto::Vec3&
AddPointLightReq::_Internal::color(const AddPointLightReq* msg) {
  return *msg->_impl_.color_;
}
AddPointLightReq::AddPointLightReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.AddPointLightReq)
}
AddPointLightReq::AddPointLightReq(const AddPointLightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddPointLightReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.shadow_){}
    , decltype(_impl_.shadow_near_){}
    , decltype(_impl_.shadow_far_){}
    , decltype(_impl_.shadow_map_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::sapien::render_server::proto::Vec3(*from._impl_.position_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::sapien::render_server::proto::Vec3(*from._impl_.color_);
  }
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shadow_map_size_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.shadow_map_size_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.AddPointLightReq)
}

inline void AddPointLightReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.shadow_){false}
    , decltype(_impl_.shadow_near_){0}
    , decltype(_impl_.shadow_far_){0}
    , decltype(_impl_.shadow_map_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddPointLightReq::~AddPointLightReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.AddPointLightReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddPointLightReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.color_;
}

void AddPointLightReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddPointLightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.AddPointLightReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shadow_map_size_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.shadow_map_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddPointLightReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float shadow_near = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.shadow_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shadow_far = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.shadow_far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 shadow_map_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.shadow_map_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddPointLightReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.AddPointLightReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // .sapien.render_server.proto.Vec3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .sapien.render_server.proto.Vec3 color = 3;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // bool shadow = 4;
  if (this->_internal_shadow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_shadow(), target);
  }

  // float shadow_near = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = this->_internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_shadow_near(), target);
  }

  // float shadow_far = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = this->_internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_shadow_far(), target);
  }

  // int32 shadow_map_size = 7;
  if (this->_internal_shadow_map_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_shadow_map_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.AddPointLightReq)
  return target;
}

size_t AddPointLightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.AddPointLightReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .sapien.render_server.proto.Vec3 color = 3;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // bool shadow = 4;
  if (this->_internal_shadow() != 0) {
    total_size += 1 + 1;
  }

  // float shadow_near = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = this->_internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    total_size += 1 + 4;
  }

  // float shadow_far = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = this->_internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    total_size += 1 + 4;
  }

  // int32 shadow_map_size = 7;
  if (this->_internal_shadow_map_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shadow_map_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddPointLightReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddPointLightReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddPointLightReq::GetClassData() const { return &_class_data_; }


void AddPointLightReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddPointLightReq*>(&to_msg);
  auto& from = static_cast<const AddPointLightReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.AddPointLightReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_color());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_shadow() != 0) {
    _this->_internal_set_shadow(from._internal_shadow());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = from._internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    _this->_internal_set_shadow_near(from._internal_shadow_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = from._internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    _this->_internal_set_shadow_far(from._internal_shadow_far());
  }
  if (from._internal_shadow_map_size() != 0) {
    _this->_internal_set_shadow_map_size(from._internal_shadow_map_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddPointLightReq::CopyFrom(const AddPointLightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.AddPointLightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPointLightReq::IsInitialized() const {
  return true;
}

void AddPointLightReq::InternalSwap(AddPointLightReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddPointLightReq, _impl_.shadow_map_size_)
      + sizeof(AddPointLightReq::_impl_.shadow_map_size_)
      - PROTOBUF_FIELD_OFFSET(AddPointLightReq, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddPointLightReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[16]);
}

// ===================================================================

class AddDirectionalLightReq::_Internal {
 public:
  static const ::sapien::render_server::proto::Vec3& direction(const AddDirectionalLightReq* msg);
  static const ::sapien::render_server::proto::Vec3& color(const AddDirectionalLightReq* msg);
  static const ::sapien::render_server::proto::Vec3& position(const AddDirectionalLightReq* msg);
};

const ::sapien::render_server::proto::Vec3&
AddDirectionalLightReq::_Internal::direction(const AddDirectionalLightReq* msg) {
  return *msg->_impl_.direction_;
}
const ::sapien::render_server::proto::Vec3&
AddDirectionalLightReq::_Internal::color(const AddDirectionalLightReq* msg) {
  return *msg->_impl_.color_;
}
const ::sapien::render_server::proto::Vec3&
AddDirectionalLightReq::_Internal::position(const AddDirectionalLightReq* msg) {
  return *msg->_impl_.position_;
}
AddDirectionalLightReq::AddDirectionalLightReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.AddDirectionalLightReq)
}
AddDirectionalLightReq::AddDirectionalLightReq(const AddDirectionalLightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AddDirectionalLightReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.shadow_){}
    , decltype(_impl_.shadow_scale_){}
    , decltype(_impl_.shadow_near_){}
    , decltype(_impl_.shadow_far_){}
    , decltype(_impl_.shadow_map_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::sapien::render_server::proto::Vec3(*from._impl_.direction_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::sapien::render_server::proto::Vec3(*from._impl_.color_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::sapien::render_server::proto::Vec3(*from._impl_.position_);
  }
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shadow_map_size_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.shadow_map_size_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.AddDirectionalLightReq)
}

inline void AddDirectionalLightReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.direction_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.shadow_){false}
    , decltype(_impl_.shadow_scale_){0}
    , decltype(_impl_.shadow_near_){0}
    , decltype(_impl_.shadow_far_){0}
    , decltype(_impl_.shadow_map_size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AddDirectionalLightReq::~AddDirectionalLightReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.AddDirectionalLightReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddDirectionalLightReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.direction_;
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.position_;
}

void AddDirectionalLightReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddDirectionalLightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.AddDirectionalLightReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.color_ != nullptr) {
    delete _impl_.color_;
  }
  _impl_.color_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shadow_map_size_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.shadow_map_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDirectionalLightReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool shadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.shadow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sapien.render_server.proto.Vec3 position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float shadow_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.shadow_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shadow_near = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.shadow_near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float shadow_far = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.shadow_far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 shadow_map_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.shadow_map_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddDirectionalLightReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.AddDirectionalLightReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // .sapien.render_server.proto.Vec3 direction = 2;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // .sapien.render_server.proto.Vec3 color = 3;
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // bool shadow = 4;
  if (this->_internal_shadow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_shadow(), target);
  }

  // .sapien.render_server.proto.Vec3 position = 5;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // float shadow_scale = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_scale = this->_internal_shadow_scale();
  uint32_t raw_shadow_scale;
  memcpy(&raw_shadow_scale, &tmp_shadow_scale, sizeof(tmp_shadow_scale));
  if (raw_shadow_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_shadow_scale(), target);
  }

  // float shadow_near = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = this->_internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_shadow_near(), target);
  }

  // float shadow_far = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = this->_internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_shadow_far(), target);
  }

  // int32 shadow_map_size = 9;
  if (this->_internal_shadow_map_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_shadow_map_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.AddDirectionalLightReq)
  return target;
}

size_t AddDirectionalLightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.AddDirectionalLightReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sapien.render_server.proto.Vec3 direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  // .sapien.render_server.proto.Vec3 color = 3;
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  // .sapien.render_server.proto.Vec3 position = 5;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // bool shadow = 4;
  if (this->_internal_shadow() != 0) {
    total_size += 1 + 1;
  }

  // float shadow_scale = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_scale = this->_internal_shadow_scale();
  uint32_t raw_shadow_scale;
  memcpy(&raw_shadow_scale, &tmp_shadow_scale, sizeof(tmp_shadow_scale));
  if (raw_shadow_scale != 0) {
    total_size += 1 + 4;
  }

  // float shadow_near = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = this->_internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    total_size += 1 + 4;
  }

  // float shadow_far = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = this->_internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    total_size += 1 + 4;
  }

  // int32 shadow_map_size = 9;
  if (this->_internal_shadow_map_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shadow_map_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDirectionalLightReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AddDirectionalLightReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDirectionalLightReq::GetClassData() const { return &_class_data_; }


void AddDirectionalLightReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AddDirectionalLightReq*>(&to_msg);
  auto& from = static_cast<const AddDirectionalLightReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.AddDirectionalLightReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _this->_internal_mutable_direction()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_direction());
  }
  if (from._internal_has_color()) {
    _this->_internal_mutable_color()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_color());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::sapien::render_server::proto::Vec3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_shadow() != 0) {
    _this->_internal_set_shadow(from._internal_shadow());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_scale = from._internal_shadow_scale();
  uint32_t raw_shadow_scale;
  memcpy(&raw_shadow_scale, &tmp_shadow_scale, sizeof(tmp_shadow_scale));
  if (raw_shadow_scale != 0) {
    _this->_internal_set_shadow_scale(from._internal_shadow_scale());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_near = from._internal_shadow_near();
  uint32_t raw_shadow_near;
  memcpy(&raw_shadow_near, &tmp_shadow_near, sizeof(tmp_shadow_near));
  if (raw_shadow_near != 0) {
    _this->_internal_set_shadow_near(from._internal_shadow_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_shadow_far = from._internal_shadow_far();
  uint32_t raw_shadow_far;
  memcpy(&raw_shadow_far, &tmp_shadow_far, sizeof(tmp_shadow_far));
  if (raw_shadow_far != 0) {
    _this->_internal_set_shadow_far(from._internal_shadow_far());
  }
  if (from._internal_shadow_map_size() != 0) {
    _this->_internal_set_shadow_map_size(from._internal_shadow_map_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddDirectionalLightReq::CopyFrom(const AddDirectionalLightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.AddDirectionalLightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDirectionalLightReq::IsInitialized() const {
  return true;
}

void AddDirectionalLightReq::InternalSwap(AddDirectionalLightReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddDirectionalLightReq, _impl_.shadow_map_size_)
      + sizeof(AddDirectionalLightReq::_impl_.shadow_map_size_)
      - PROTOBUF_FIELD_OFFSET(AddDirectionalLightReq, _impl_.direction_)>(
          reinterpret_cast<char*>(&_impl_.direction_),
          reinterpret_cast<char*>(&other->_impl_.direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDirectionalLightReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[17]);
}

// ===================================================================

class RemoveLightReq::_Internal {
 public:
};

RemoveLightReq::RemoveLightReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.RemoveLightReq)
}
RemoveLightReq::RemoveLightReq(const RemoveLightReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveLightReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.light_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.light_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.light_id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.RemoveLightReq)
}

inline void RemoveLightReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.light_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveLightReq::~RemoveLightReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.RemoveLightReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveLightReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveLightReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveLightReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.RemoveLightReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.light_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.light_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveLightReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 light_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.light_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveLightReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.RemoveLightReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 light_id = 2;
  if (this->_internal_light_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_light_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.RemoveLightReq)
  return target;
}

size_t RemoveLightReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.RemoveLightReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 light_id = 2;
  if (this->_internal_light_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_light_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveLightReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveLightReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveLightReq::GetClassData() const { return &_class_data_; }


void RemoveLightReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveLightReq*>(&to_msg);
  auto& from = static_cast<const RemoveLightReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.RemoveLightReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_light_id() != 0) {
    _this->_internal_set_light_id(from._internal_light_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveLightReq::CopyFrom(const RemoveLightReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.RemoveLightReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveLightReq::IsInitialized() const {
  return true;
}

void RemoveLightReq::InternalSwap(RemoveLightReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoveLightReq, _impl_.light_id_)
      + sizeof(RemoveLightReq::_impl_.light_id_)
      - PROTOBUF_FIELD_OFFSET(RemoveLightReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveLightReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[18]);
}

// ===================================================================

class EntityOrderReq::_Internal {
 public:
};

EntityOrderReq::EntityOrderReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.EntityOrderReq)
}
EntityOrderReq::EntityOrderReq(const EntityOrderReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntityOrderReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_ids_){from._impl_.body_ids_}
    , /*decltype(_impl_._body_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.camera_ids_){from._impl_.camera_ids_}
    , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.scene_id_ = from._impl_.scene_id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.EntityOrderReq)
}

inline void EntityOrderReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_ids_){arena}
    , /*decltype(_impl_._body_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.camera_ids_){arena}
    , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EntityOrderReq::~EntityOrderReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.EntityOrderReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntityOrderReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_ids_.~RepeatedField();
  _impl_.camera_ids_.~RepeatedField();
}

void EntityOrderReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntityOrderReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.EntityOrderReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_ids_.Clear();
  _impl_.camera_ids_.Clear();
  _impl_.scene_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntityOrderReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 body_ids = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_body_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_body_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 camera_ids = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_camera_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_camera_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntityOrderReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.EntityOrderReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // repeated uint64 body_ids = 2 [packed = true];
  {
    int byte_size = _impl_._body_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_body_ids(), byte_size, target);
    }
  }

  // repeated uint64 camera_ids = 3 [packed = true];
  {
    int byte_size = _impl_._camera_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_camera_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.EntityOrderReq)
  return target;
}

size_t EntityOrderReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.EntityOrderReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 body_ids = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.body_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._body_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 camera_ids = 3 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.camera_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._camera_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntityOrderReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntityOrderReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntityOrderReq::GetClassData() const { return &_class_data_; }


void EntityOrderReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntityOrderReq*>(&to_msg);
  auto& from = static_cast<const EntityOrderReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.EntityOrderReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.body_ids_.MergeFrom(from._impl_.body_ids_);
  _this->_impl_.camera_ids_.MergeFrom(from._impl_.camera_ids_);
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntityOrderReq::CopyFrom(const EntityOrderReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.EntityOrderReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityOrderReq::IsInitialized() const {
  return true;
}

void EntityOrderReq::InternalSwap(EntityOrderReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.body_ids_.InternalSwap(&other->_impl_.body_ids_);
  _impl_.camera_ids_.InternalSwap(&other->_impl_.camera_ids_);
  swap(_impl_.scene_id_, other->_impl_.scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntityOrderReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[19]);
}

// ===================================================================

class UpdateRenderReq::_Internal {
 public:
};

UpdateRenderReq::UpdateRenderReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.UpdateRenderReq)
}
UpdateRenderReq::UpdateRenderReq(const UpdateRenderReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRenderReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_poses_){from._impl_.body_poses_}
    , decltype(_impl_.camera_poses_){from._impl_.camera_poses_}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.scene_id_ = from._impl_.scene_id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.UpdateRenderReq)
}

inline void UpdateRenderReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_poses_){arena}
    , decltype(_impl_.camera_poses_){arena}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateRenderReq::~UpdateRenderReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.UpdateRenderReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRenderReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_poses_.~RepeatedPtrField();
  _impl_.camera_poses_.~RepeatedPtrField();
}

void UpdateRenderReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRenderReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.UpdateRenderReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_poses_.Clear();
  _impl_.camera_poses_.Clear();
  _impl_.scene_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRenderReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sapien.render_server.proto.Pose body_poses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_body_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sapien.render_server.proto.Pose camera_poses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRenderReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.UpdateRenderReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // repeated .sapien.render_server.proto.Pose body_poses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_body_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_body_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sapien.render_server.proto.Pose camera_poses = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.UpdateRenderReq)
  return target;
}

size_t UpdateRenderReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.UpdateRenderReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sapien.render_server.proto.Pose body_poses = 2;
  total_size += 1UL * this->_internal_body_poses_size();
  for (const auto& msg : this->_impl_.body_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sapien.render_server.proto.Pose camera_poses = 3;
  total_size += 1UL * this->_internal_camera_poses_size();
  for (const auto& msg : this->_impl_.camera_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRenderReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRenderReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRenderReq::GetClassData() const { return &_class_data_; }


void UpdateRenderReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRenderReq*>(&to_msg);
  auto& from = static_cast<const UpdateRenderReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.UpdateRenderReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.body_poses_.MergeFrom(from._impl_.body_poses_);
  _this->_impl_.camera_poses_.MergeFrom(from._impl_.camera_poses_);
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRenderReq::CopyFrom(const UpdateRenderReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.UpdateRenderReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRenderReq::IsInitialized() const {
  return true;
}

void UpdateRenderReq::InternalSwap(UpdateRenderReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.body_poses_.InternalSwap(&other->_impl_.body_poses_);
  _impl_.camera_poses_.InternalSwap(&other->_impl_.camera_poses_);
  swap(_impl_.scene_id_, other->_impl_.scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRenderReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[20]);
}

// ===================================================================

class BodyIdReq::_Internal {
 public:
};

BodyIdReq::BodyIdReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.BodyIdReq)
}
BodyIdReq::BodyIdReq(const BodyIdReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BodyIdReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.body_id_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.BodyIdReq)
}

inline void BodyIdReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.body_id_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BodyIdReq::~BodyIdReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.BodyIdReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BodyIdReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BodyIdReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BodyIdReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.BodyIdReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyIdReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BodyIdReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.BodyIdReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_id(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.BodyIdReq)
  return target;
}

size_t BodyIdReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.BodyIdReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_id());
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BodyIdReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BodyIdReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BodyIdReq::GetClassData() const { return &_class_data_; }


void BodyIdReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BodyIdReq*>(&to_msg);
  auto& from = static_cast<const BodyIdReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.BodyIdReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_body_id() != 0) {
    _this->_internal_set_body_id(from._internal_body_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BodyIdReq::CopyFrom(const BodyIdReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.BodyIdReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyIdReq::IsInitialized() const {
  return true;
}

void BodyIdReq::InternalSwap(BodyIdReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyIdReq, _impl_.id_)
      + sizeof(BodyIdReq::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(BodyIdReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyIdReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[21]);
}

// ===================================================================

class BodyUint32Req::_Internal {
 public:
};

BodyUint32Req::BodyUint32Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.BodyUint32Req)
}
BodyUint32Req::BodyUint32Req(const BodyUint32Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BodyUint32Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.body_id_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.BodyUint32Req)
}

inline void BodyUint32Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.body_id_){uint64_t{0u}}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BodyUint32Req::~BodyUint32Req() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.BodyUint32Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BodyUint32Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BodyUint32Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BodyUint32Req::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.BodyUint32Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyUint32Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BodyUint32Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.BodyUint32Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_id(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.BodyUint32Req)
  return target;
}

size_t BodyUint32Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.BodyUint32Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_id());
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BodyUint32Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BodyUint32Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BodyUint32Req::GetClassData() const { return &_class_data_; }


void BodyUint32Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BodyUint32Req*>(&to_msg);
  auto& from = static_cast<const BodyUint32Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.BodyUint32Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_body_id() != 0) {
    _this->_internal_set_body_id(from._internal_body_id());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BodyUint32Req::CopyFrom(const BodyUint32Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.BodyUint32Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyUint32Req::IsInitialized() const {
  return true;
}

void BodyUint32Req::InternalSwap(BodyUint32Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyUint32Req, _impl_.id_)
      + sizeof(BodyUint32Req::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(BodyUint32Req, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyUint32Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[22]);
}

// ===================================================================

class BodyFloat32Req::_Internal {
 public:
};

BodyFloat32Req::BodyFloat32Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.BodyFloat32Req)
}
BodyFloat32Req::BodyFloat32Req(const BodyFloat32Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BodyFloat32Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.body_id_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.value_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.BodyFloat32Req)
}

inline void BodyFloat32Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.body_id_){uint64_t{0u}}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BodyFloat32Req::~BodyFloat32Req() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.BodyFloat32Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BodyFloat32Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BodyFloat32Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BodyFloat32Req::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.BodyFloat32Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyFloat32Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BodyFloat32Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.BodyFloat32Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_id(), target);
  }

  // float value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.BodyFloat32Req)
  return target;
}

size_t BodyFloat32Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.BodyFloat32Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_id());
  }

  // float value = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = this->_internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BodyFloat32Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BodyFloat32Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BodyFloat32Req::GetClassData() const { return &_class_data_; }


void BodyFloat32Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BodyFloat32Req*>(&to_msg);
  auto& from = static_cast<const BodyFloat32Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.BodyFloat32Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_body_id() != 0) {
    _this->_internal_set_body_id(from._internal_body_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_value = from._internal_value();
  uint32_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BodyFloat32Req::CopyFrom(const BodyFloat32Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.BodyFloat32Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyFloat32Req::IsInitialized() const {
  return true;
}

void BodyFloat32Req::InternalSwap(BodyFloat32Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyFloat32Req, _impl_.value_)
      + sizeof(BodyFloat32Req::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(BodyFloat32Req, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyFloat32Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[23]);
}

// ===================================================================

class TakePictureReq::_Internal {
 public:
};

TakePictureReq::TakePictureReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.TakePictureReq)
}
TakePictureReq::TakePictureReq(const TakePictureReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TakePictureReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.camera_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camera_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.camera_id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.TakePictureReq)
}

inline void TakePictureReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.camera_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TakePictureReq::~TakePictureReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.TakePictureReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TakePictureReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TakePictureReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TakePictureReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.TakePictureReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camera_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.camera_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TakePictureReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TakePictureReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.TakePictureReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.TakePictureReq)
  return target;
}

size_t TakePictureReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.TakePictureReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camera_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TakePictureReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TakePictureReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TakePictureReq::GetClassData() const { return &_class_data_; }


void TakePictureReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TakePictureReq*>(&to_msg);
  auto& from = static_cast<const TakePictureReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.TakePictureReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_camera_id() != 0) {
    _this->_internal_set_camera_id(from._internal_camera_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TakePictureReq::CopyFrom(const TakePictureReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.TakePictureReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakePictureReq::IsInitialized() const {
  return true;
}

void TakePictureReq::InternalSwap(TakePictureReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TakePictureReq, _impl_.camera_id_)
      + sizeof(TakePictureReq::_impl_.camera_id_)
      - PROTOBUF_FIELD_OFFSET(TakePictureReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TakePictureReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[24]);
}

// ===================================================================

class UpdateRenderAndTakePicturesReq::_Internal {
 public:
};

UpdateRenderAndTakePicturesReq::UpdateRenderAndTakePicturesReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
}
UpdateRenderAndTakePicturesReq::UpdateRenderAndTakePicturesReq(const UpdateRenderAndTakePicturesReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateRenderAndTakePicturesReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_poses_){from._impl_.body_poses_}
    , decltype(_impl_.camera_poses_){from._impl_.camera_poses_}
    , decltype(_impl_.camera_ids_){from._impl_.camera_ids_}
    , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.scene_id_ = from._impl_.scene_id_;
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
}

inline void UpdateRenderAndTakePicturesReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_poses_){arena}
    , decltype(_impl_.camera_poses_){arena}
    , decltype(_impl_.camera_ids_){arena}
    , /*decltype(_impl_._camera_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.scene_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateRenderAndTakePicturesReq::~UpdateRenderAndTakePicturesReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateRenderAndTakePicturesReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_poses_.~RepeatedPtrField();
  _impl_.camera_poses_.~RepeatedPtrField();
  _impl_.camera_ids_.~RepeatedField();
}

void UpdateRenderAndTakePicturesReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateRenderAndTakePicturesReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_poses_.Clear();
  _impl_.camera_poses_.Clear();
  _impl_.camera_ids_.Clear();
  _impl_.scene_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRenderAndTakePicturesReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sapien.render_server.proto.Pose body_poses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_body_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sapien.render_server.proto.Pose camera_poses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 camera_ids = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_camera_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_camera_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateRenderAndTakePicturesReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // repeated .sapien.render_server.proto.Pose body_poses = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_body_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_body_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .sapien.render_server.proto.Pose camera_poses = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camera_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_camera_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 camera_ids = 4 [packed = true];
  {
    int byte_size = _impl_._camera_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_camera_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  return target;
}

size_t UpdateRenderAndTakePicturesReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sapien.render_server.proto.Pose body_poses = 2;
  total_size += 1UL * this->_internal_body_poses_size();
  for (const auto& msg : this->_impl_.body_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sapien.render_server.proto.Pose camera_poses = 3;
  total_size += 1UL * this->_internal_camera_poses_size();
  for (const auto& msg : this->_impl_.camera_poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 camera_ids = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.camera_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._camera_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRenderAndTakePicturesReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateRenderAndTakePicturesReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRenderAndTakePicturesReq::GetClassData() const { return &_class_data_; }


void UpdateRenderAndTakePicturesReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateRenderAndTakePicturesReq*>(&to_msg);
  auto& from = static_cast<const UpdateRenderAndTakePicturesReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.body_poses_.MergeFrom(from._impl_.body_poses_);
  _this->_impl_.camera_poses_.MergeFrom(from._impl_.camera_poses_);
  _this->_impl_.camera_ids_.MergeFrom(from._impl_.camera_ids_);
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRenderAndTakePicturesReq::CopyFrom(const UpdateRenderAndTakePicturesReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.UpdateRenderAndTakePicturesReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRenderAndTakePicturesReq::IsInitialized() const {
  return true;
}

void UpdateRenderAndTakePicturesReq::InternalSwap(UpdateRenderAndTakePicturesReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.body_poses_.InternalSwap(&other->_impl_.body_poses_);
  _impl_.camera_poses_.InternalSwap(&other->_impl_.camera_poses_);
  _impl_.camera_ids_.InternalSwap(&other->_impl_.camera_ids_);
  swap(_impl_.scene_id_, other->_impl_.scene_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRenderAndTakePicturesReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[25]);
}

// ===================================================================

class CameraParamsReq::_Internal {
 public:
};

CameraParamsReq::CameraParamsReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.CameraParamsReq)
}
CameraParamsReq::CameraParamsReq(const CameraParamsReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CameraParamsReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.near_){}
    , decltype(_impl_.far_){}
    , decltype(_impl_.fx_){}
    , decltype(_impl_.fy_){}
    , decltype(_impl_.cx_){}
    , decltype(_impl_.cy_){}
    , decltype(_impl_.skew_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skew_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.skew_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.CameraParamsReq)
}

inline void CameraParamsReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.camera_id_){uint64_t{0u}}
    , decltype(_impl_.near_){0}
    , decltype(_impl_.far_){0}
    , decltype(_impl_.fx_){0}
    , decltype(_impl_.fy_){0}
    , decltype(_impl_.cx_){0}
    , decltype(_impl_.cy_){0}
    , decltype(_impl_.skew_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CameraParamsReq::~CameraParamsReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.CameraParamsReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraParamsReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CameraParamsReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraParamsReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.CameraParamsReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skew_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.skew_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraParamsReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float near = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.near_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float far = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.far_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.cx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float cy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.cy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float skew = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.skew_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CameraParamsReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.CameraParamsReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_camera_id(), target);
  }

  // float near = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = this->_internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_near(), target);
  }

  // float far = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = this->_internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_far(), target);
  }

  // float fx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fx(), target);
  }

  // float fy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = this->_internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_fy(), target);
  }

  // float cx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = this->_internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_cx(), target);
  }

  // float cy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = this->_internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_cy(), target);
  }

  // float skew = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = this->_internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_skew(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.CameraParamsReq)
  return target;
}

size_t CameraParamsReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.CameraParamsReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 camera_id = 2;
  if (this->_internal_camera_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_camera_id());
  }

  // float near = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = this->_internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    total_size += 1 + 4;
  }

  // float far = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = this->_internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    total_size += 1 + 4;
  }

  // float fx = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 4;
  }

  // float fy = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = this->_internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    total_size += 1 + 4;
  }

  // float cx = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = this->_internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    total_size += 1 + 4;
  }

  // float cy = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = this->_internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    total_size += 1 + 4;
  }

  // float skew = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = this->_internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraParamsReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CameraParamsReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraParamsReq::GetClassData() const { return &_class_data_; }


void CameraParamsReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CameraParamsReq*>(&to_msg);
  auto& from = static_cast<const CameraParamsReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.CameraParamsReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_camera_id() != 0) {
    _this->_internal_set_camera_id(from._internal_camera_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_near = from._internal_near();
  uint32_t raw_near;
  memcpy(&raw_near, &tmp_near, sizeof(tmp_near));
  if (raw_near != 0) {
    _this->_internal_set_near(from._internal_near());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_far = from._internal_far();
  uint32_t raw_far;
  memcpy(&raw_far, &tmp_far, sizeof(tmp_far));
  if (raw_far != 0) {
    _this->_internal_set_far(from._internal_far());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = from._internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _this->_internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fy = from._internal_fy();
  uint32_t raw_fy;
  memcpy(&raw_fy, &tmp_fy, sizeof(tmp_fy));
  if (raw_fy != 0) {
    _this->_internal_set_fy(from._internal_fy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cx = from._internal_cx();
  uint32_t raw_cx;
  memcpy(&raw_cx, &tmp_cx, sizeof(tmp_cx));
  if (raw_cx != 0) {
    _this->_internal_set_cx(from._internal_cx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cy = from._internal_cy();
  uint32_t raw_cy;
  memcpy(&raw_cy, &tmp_cy, sizeof(tmp_cy));
  if (raw_cy != 0) {
    _this->_internal_set_cy(from._internal_cy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_skew = from._internal_skew();
  uint32_t raw_skew;
  memcpy(&raw_skew, &tmp_skew, sizeof(tmp_skew));
  if (raw_skew != 0) {
    _this->_internal_set_skew(from._internal_skew());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraParamsReq::CopyFrom(const CameraParamsReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.CameraParamsReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraParamsReq::IsInitialized() const {
  return true;
}

void CameraParamsReq::InternalSwap(CameraParamsReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraParamsReq, _impl_.skew_)
      + sizeof(CameraParamsReq::_impl_.skew_)
      - PROTOBUF_FIELD_OFFSET(CameraParamsReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraParamsReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[26]);
}

// ===================================================================

class BodyReq::_Internal {
 public:
};

BodyReq::BodyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:sapien.render_server.proto.BodyReq)
}
BodyReq::BodyReq(const BodyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BodyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.body_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.body_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.body_id_));
  // @@protoc_insertion_point(copy_constructor:sapien.render_server.proto.BodyReq)
}

inline void BodyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){uint64_t{0u}}
    , decltype(_impl_.body_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BodyReq::~BodyReq() {
  // @@protoc_insertion_point(destructor:sapien.render_server.proto.BodyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BodyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BodyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BodyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:sapien.render_server.proto.BodyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.body_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.body_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BodyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 body_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.body_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BodyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sapien.render_server.proto.BodyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_scene_id(), target);
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_body_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sapien.render_server.proto.BodyReq)
  return target;
}

size_t BodyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sapien.render_server.proto.BodyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_scene_id());
  }

  // uint64 body_id = 2;
  if (this->_internal_body_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_body_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BodyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BodyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BodyReq::GetClassData() const { return &_class_data_; }


void BodyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BodyReq*>(&to_msg);
  auto& from = static_cast<const BodyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:sapien.render_server.proto.BodyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_body_id() != 0) {
    _this->_internal_set_body_id(from._internal_body_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BodyReq::CopyFrom(const BodyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sapien.render_server.proto.BodyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyReq::IsInitialized() const {
  return true;
}

void BodyReq::InternalSwap(BodyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BodyReq, _impl_.body_id_)
      + sizeof(BodyReq::_impl_.body_id_)
      - PROTOBUF_FIELD_OFFSET(BodyReq, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BodyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_render_5fserver_2eproto_getter, &descriptor_table_render_5fserver_2eproto_once,
      file_level_metadata_render_5fserver_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace render_server
}  // namespace sapien
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Empty*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Empty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Empty >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Uint32*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Uint32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Uint32 >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Index*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Index >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Index >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Id*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Id >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Id >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Vec3*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Vec4*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Vec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Quat*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Quat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Quat >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::Pose*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::IdVec3*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::IdVec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::IdVec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::IdVec4*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::IdVec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::IdVec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::IdFloat*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::IdFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::IdFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::AddBodyMeshReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::AddBodyMeshReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::AddBodyMeshReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::AddBodyPrimitiveReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::AddBodyPrimitiveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::AddBodyPrimitiveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::RemoveBodyReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::RemoveBodyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::RemoveBodyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::AddCameraReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::AddCameraReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::AddCameraReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::RemoveCameraReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::RemoveCameraReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::RemoveCameraReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::AddPointLightReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::AddPointLightReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::AddPointLightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::AddDirectionalLightReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::AddDirectionalLightReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::AddDirectionalLightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::RemoveLightReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::RemoveLightReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::RemoveLightReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::EntityOrderReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::EntityOrderReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::EntityOrderReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::UpdateRenderReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::UpdateRenderReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::UpdateRenderReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::BodyIdReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::BodyIdReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::BodyIdReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::BodyUint32Req*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::BodyUint32Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::BodyUint32Req >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::BodyFloat32Req*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::BodyFloat32Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::BodyFloat32Req >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::TakePictureReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::TakePictureReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::TakePictureReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::UpdateRenderAndTakePicturesReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::CameraParamsReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::CameraParamsReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::CameraParamsReq >(arena);
}
template<> PROTOBUF_NOINLINE ::sapien::render_server::proto::BodyReq*
Arena::CreateMaybeMessage< ::sapien::render_server::proto::BodyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sapien::render_server::proto::BodyReq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
