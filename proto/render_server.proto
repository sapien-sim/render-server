syntax = "proto3";
package sapien.render_server.proto;

service RenderService {
  //========== Renderer ==========//
  rpc CreateScene(Index) returns (Id);
  rpc RemoveScene(Id) returns (Empty);
  rpc CreateMaterial(Empty) returns (Id);
  rpc RemoveMaterial(Id) returns (Empty);

  //========== Scene ==========//
  rpc AddBodyMesh(AddBodyMeshReq) returns (Id);
  rpc AddBodyPrimitive(AddBodyPrimitiveReq) returns (Id);
  rpc RemoveBody(RemoveBodyReq) returns (Empty);

  rpc AddCamera(AddCameraReq) returns (Id);

  rpc SetAmbientLight(IdVec3) returns (Empty);
  rpc AddPointLight(AddPointLightReq) returns (Id);
  rpc AddDirectionalLight(AddDirectionalLightReq) returns (Id);

  rpc SetEntityOrder(EntityOrderReq) returns (Empty);
  rpc UpdateRender(UpdateRenderReq) returns (Empty);
  rpc UpdateRenderAndTakePictures(UpdateRenderAndTakePicturesReq) returns (Empty);

  //========== Material ==========//
  rpc SetBaseColor(IdVec4) returns (Empty);
  rpc SetRoughness(IdFloat) returns (Empty);
  rpc SetSpecular(IdFloat) returns (Empty);
  rpc SetMetallic(IdFloat) returns (Empty);

  //========== Body ==========//
  // rpc SetUniqueId(BodyIdReq) returns (Empty);
  // rpc SetSegmentationId(BodyIdReq) returns (Empty);
  rpc SetVisibility(BodyFloat32Req) returns (Empty);
  rpc GetShapeCount(BodyReq) returns (Uint32);

  //========== Shape ==========//
  rpc GetShapeMaterial(BodyUint32Req) returns (Id);

  //========== Camera ==========//
  rpc TakePicture(TakePictureReq) returns (Empty);
  rpc SetCameraParameters(CameraParamsReq) returns (Empty);
}

message Empty {}

message Uint32 {
  uint32 value = 1;
};

message Index {
  uint64 index = 1;
}

message Id {
  uint64 id = 1;
}

message Vec3 {
  float x = 1;
  float y = 2;
  float z = 3;
};

message Vec4 {
  float x = 1;
  float y = 2;
  float z = 3;
  float w = 4;
}

message Quat {
  float w = 1;
  float x = 2;
  float y = 3;
  float z = 4;
};

enum PrimitiveType {
  SPHERE = 0;
  BOX = 1;
  CAPSULE = 2;
  PLANE = 3;
  CYLINDER = 4;
}

message Pose {
  Vec3 p = 1;
  Quat q = 2;
}

message IdVec3 {
  uint64 id = 1;
  Vec3 data = 2;
}

message IdVec4 {
  uint64 id = 1;
  Vec4 data = 2;
}

message IdFloat {
  uint64 id = 1;
  float data = 2;
}

message AddBodyMeshReq {
  uint64 scene_id = 1;
  string filename = 2;
  Vec3 scale = 3;
  uint64 segmentation0 = 4;
  uint64 segmentation1 = 5;
}

message AddBodyPrimitiveReq {
  uint64 scene_id = 1;
  PrimitiveType type = 2;
  Vec3 scale = 3;
  uint64 material = 4;
  uint64 segmentation0 = 5;
  uint64 segmentation1 = 6;
}

message RemoveBodyReq {
  uint64 scene_id = 1;
  uint64 body_id = 2;
}

message AddCameraReq {
  uint64 scene_id = 1;
  uint32 width = 2;
  uint32 height = 3;
  float near = 4;
  float far = 5;
  float fx = 6;
  float fy = 7;
  float cx = 8;
  float cy = 9;
  float skew = 10;
  string shader = 11;
}

message RemoveCameraReq {
  uint64 scene_id = 1;
  uint64 camera_id = 2;
}

message AddPointLightReq {
  uint64 scene_id = 1;
  Vec3 position = 2;
  Vec3 color = 3;
  bool shadow = 4;
  float shadow_near = 5;
  float shadow_far = 6;
  int32 shadow_map_size = 7;
}

message AddDirectionalLightReq {
  uint64 scene_id = 1;
  Vec3 direction = 2;
  Vec3 color = 3;
  bool shadow = 4;
  Vec3 position = 5;
  float shadow_scale = 6;
  float shadow_near = 7;
  float shadow_far = 8;
  int32 shadow_map_size = 9;
}

message RemoveLightReq {
  uint64 scene_id = 1;
  uint64 light_id = 2;
}

message EntityOrderReq {
  uint64 scene_id = 1;
  repeated uint64 body_ids = 2 [packed=true];
  repeated uint64 camera_ids = 3 [packed=true];
}

message UpdateRenderReq {
  uint64 scene_id = 1;
  repeated Pose body_poses = 2;
  repeated Pose camera_poses = 3;
}

message BodyIdReq {
  uint64 scene_id = 1;
  uint64 body_id = 2;
  uint32 id = 3;
}

message BodyUint32Req {
  uint64 scene_id = 1;
  uint64 body_id = 2;
  uint32 id = 3;
}

message BodyFloat32Req {
  uint64 scene_id = 1;
  uint64 body_id = 2;
  float value = 3;
}

message TakePictureReq {
  uint64 scene_id = 1;
  uint64 camera_id = 2;
}

message UpdateRenderAndTakePicturesReq {
  uint64 scene_id = 1;
  repeated Pose body_poses = 2;
  repeated Pose camera_poses = 3;
  repeated uint64 camera_ids = 4 [packed=true];
}

message CameraParamsReq {
  uint64 scene_id = 1;
  uint64 camera_id = 2;
  float near = 3;
  float far = 4;
  float fx = 5;
  float fy = 6;
  float cx = 7;
  float cy = 8;
  float skew = 9;
}

message BodyReq {
  uint64 scene_id = 1;
  uint64 body_id = 2;
}
